%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: logo UNICAEN.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: katia lugan
%%CreationDate: 10/02/12
%%BoundingBox: 0 0 317 202
%%HiResBoundingBox: 0 0 316.0372 201.1866
%%CropBox: 0 0 316.0372 201.1866
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 11146 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD3BFFA7C39A94698D698D6FFD74FFA79A6969688D698D688D6969%A1FD71FFCA938D698D698D698D698D698D69A1FD6FFFCA9A688D6869688D%6869688D6F936F93A0FD6EFFCA93698D698D698D939AA1CACAFD72FFA18D%688D688D6993A1FD76FFA08D698D698D6FCAFD77FF9A8D6869688D9AFD68%FFCACACAFD0DFFA18D698D698DA1FD68FFA793688D6FFD0BFFCA93688D69%8DA1FD69FF9A698D698DA1FD0AFF9A698D698DA1FD6AFF6F69686968C3FD%09FFC9688D68699AFD0FFFA8FD5BFFCA698D699AFD0AFF938D698D93FD10%FF9A93FD3CFFCACAA8FD0BFFA8FFCAFD0FFFA1CACAFD09FFA169688D69CA%FD0FFFC3688D9AFD0FFFCACAA8FFCACAA8FFCACAA8FFCACAA8FD07FFA8CF%CACFFD0FFFCAA8FF93698D93FD09FF9A8D699393CAFD19FF9A698D699AFD%10FF938D6993CAFD0CFFCA69936993699369936993699369936994FD06FF%CA936993699AFD0CFFA193698DA1688D6893CAFD08FFCA6969688D68CAFD%17FFCA688D6869A1FD10FF936869689AFD0CFFA069688D6869688D686968%8D6869688D69FD07FF9A69688D689AFD0BFF9A688D68A18D698D6FFD0AFF%CA698D698D6FFD17FF9A8D698D93FD11FFA18D698D69FD0CFFC3698D698D%698D698D698D698D698D6993FD08FF9A8D698D69C3FD0AFF9A8D698DA168%8D6993FD0BFFCA688D69696FFD16FF93688D68A1FD12FF6F69688D9AFD0B%FFA18D6993698D6993698D6993698D698D6FFD09FF6F8D696968C3FD09FF%9A688D68A18D698D93FD0CFFC3698D698D9AFD09FFCA9A93A0FD08FF698D%698DCAFD12FFC3698D6993FD0CFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFD%0BFF6F8D698D69CAFD08FF9A8D698DA168696893FD0DFF9A688D68699AFD%07FFA88D686969FD07FFA18D68696FFD0EFFCA69FFFFFFA893686968A1FD%25FFCF698D686968CFFD07FF9A686968C38D698D93FD0EFF9A698D698DA1%FD06FFCF698D6994FD07FFC3698D699AFD0EFF938DA1FFFFFFA08D698D93%FD26FFCA698D698D93FD07FF9A8D698DA1698D6893FD09FFCAA8FD04FF9A%688D688DA7FD05FFA88D69696FFD07FF6F8D69699AFD0DFFA1696893FD04%FF6969688DA1FD21FFA8FD04FFCA6969688D93FD06FF9A688D68C38D698D%6FFD09FFA193CAFD04FF94698D6993CAFD04FFCA698D6993FD07FFCAA1CA%A1FD0DFFCA93698D69CAFFFFFF9A698D699AFD09FFCFFD0F9AC3FD07FF9A%A1FD04FFC3698D698D9AFD05FF9A8D698DA1688D6893CAFD08FFCA6893A8%FFFFFFA89368696893CAFFFFFFA869688D6FFD18FF9A688D6893CAFFFFFF%A88D686968CAFD08FFA169688D6869688D6869688D6869686969FD07FF93%69A1FD04FFA06869688D9AFD04FF9A688D68A18D698D6FFD09FFC98D699A%FD04FFCA8D698D699AFFFFFFCF698D6994FD17FFCA698D698DA8FD05FF9A%8D698D93FD08FFC3698D698D698D698D698D698D698D6993CFFD06FF9A69%93CAFD04FF9A698D698DA1FFFFFF9A8D698DA1688D6993FD09FFCA696968%A1FD04FFA169688D689AFFFFA88D688D6FFD17FF6F69688D9AFD06FFCA69%69688DA7FD07FFA169688D6869688D6869688D6869688D69FD07FF9A6968%93CAFD04FF93688D698DA8FFFF9A688D68A18D698D93FD09FFA18D698D9A%FD05FFA18D698D69C3FFCF698D6994FD07FF9A699369CAFD0AFFA18D698D%69FD08FF9A698D699AFD08FF9AA19AC39AA19AC39AA19AC39AA19AC9FD07%FF9A698D69CAFD05FF93698D6993CAFF9A8D698DA168696893FD09FFC968%8D689AFD06FF9A69688D68CAA88D686969FD07FF6F6968699AFD09FFCA8D%688D68A1FD08FFA18D686968CAFD1EFF938D6869A1FD05FFA893688D6893%FF9A686968C38D698D93FD09FFA18D698D9AFD07FF9A8D698D69C9698D69%94FD07FF9A698D69C3FD09FF9A698D699AFD0AFF938D698D9AFD1EFF9A69%8D69CAFD06FFCA93698D69C29A8D698DA1698D688DCAFD08FFC9688D689A%FD08FF6F8D6969698D69696FFD07FF9A8D696993FD08FFCA6969688DA8FD%0AFFC3688D6893CAFD1DFF998D6969A1FD07FFA18D698D6893698D68C394%698D69C3FD08FFA18D698D9AFD09FF6F8D698D698D6993FD07FFC3698D69%94FD08FF6F8D698D9AFD0CFF93698D69C3FD1DFF9A698D69CAFD08FFA08D%698D698D698DA19A8D686969FD08FFCA6869689AFD09FFCA688D6869688D%6FFD07FFA169688D69FD07FFA069688D69C9A1CAA1CAA1CAA1CAA7FFFFFF%9A8D686969FD05FFCAA1A0C3A1A1A0C3A1A1A0C3A1A1A0C3A1FD07FF9A69%688DA1FD09FF9A8D6869688D68A1FF698D698D69C3CAFD04FFCA9A8D698D%9AFD0AFFCA698D698D6994FD08FF698D698DA1FD05FFCA93698D698D698D%698D698D698D698DCAFFFFFF698D698DA1FD04FFC9698D698D698D698D69%8D698D698D6993FD07FF9A698D69CAFD0AFF9A8D698D698DA1FFC9686968%8D68936F9A9393688D698D689AFD0BFFC96969688D6FFD08FF9A688D689A%FD05FFA0688D688D698D688D698D688D698D689AFFFFFFA1688D6893FD04%FFA169688D698D688D698D688D698D688D69FD07FF9A69688DA1FD0BFF6F%69688D68A1FFFFC3698D698D698D698D698D698D698D9AFD0CFFC3698D69%93FD08FFA08D698D69FD05FF9A8D698D698D698D698D698D698D698D69FF%FFFFCA8D698D68C3FFFFFFC3698D698D698D698D698D698D698D6893FD07%FF9A698D69CAFD0CFF6F8D698DA1FFFFFFCA6F69688D6869688D68696893%A1FD0EFFA068696FFD08FFCA6869688DA1FD04FFCA6F9A6F946F9A6F946F%9A6F946F9A6F94A8FFFFFF9A8D696993FFFFFFA79A6F946F9A6F946F9A6F%946F9A6F939AFD07FF9A936FA1FD0DFFCA6F6968CAFD05FFA7C39A946F9A%9A9AA1FD12FFCAA0FD0AFF9A698D6993FD1AFFCACACAFD2FFFA1CAFD2DFF%A169688D68A1FD7BFF938D698D69FD7BFFCA6869688D93FD7BFF9A698D69%8D9AFD7AFFCA93688D69699AFD7AFFCA8D698D698D9AFD7AFFA169688D68%696FCAFD79FFA18D698D698D69A1CAFD78FFA1936869688D688D93C9CAFD%76FFCA9A698D698D698D699393A0A1CAA1CAA1CAFD70FFC36F69688D6869%688D6869688D68696FFD72FFA19A698D698D698D698D698D69C3FD74FFCA%9A93698D6969688D6869A1FD78FFA7C3FD059AFDFCFFFDFCFFFD86FFCAFD%0DFFCAFD41FFC393CAFD1FFFC29AFD0BFFA193A1FD0BFF9A94CAFD11FFCA%FD2EFF69699AFD1EFFCA688DA1FFA19AA1FD05FF6F8D69C3FD0AFFCA6968%CAFD0FFFC36F8D69939AFD2BFFCA9ACAFD1FFFA19AFFFF9A68C3FD05FF9A%9AFD0DFF698DA1FD0EFFA1698D698D688DFD1AFFA19ACAFFC99ACAFFFFA1%9A9A9AA1FFFFFFA1A0A8CA9AA1FFFFA8A19AFFFFFF9A9A9AFFFFFFA8C99A%9A9ACAFFCA9A9A9AC3FFFFA0A1A8FF6F696FA19AFFFFFFA19A9ACAFD08FF%A09A9A8D68C9FFFFCAA16F9AA8FD06FFCA68696FCAA8A1A1FFFFA19A9A9A%CAFD04FFA79A93A1FFFFFFCA9A9A999AA8FFFF698DA1FF9A939AFFA18D69%8D698DA0FFFF9A69C3CA8D69CAFFC36993FFFF938D688D93FFFFC9698D68%93A1FF698D698D93FFFF8D69FFFF9A698D698DFFFF9A8D698D69C3FD06FF%9A8D688D698DA1FFFF9A698D698DA7FD05FF9A8D6FFD07FF6F8D698D69CA%FFFFA18D698D699AFFFF9A8D698D6993CAFF9368C3FF9A68A1FFC96893A1%9A6893FFFF6F8D9AFF6F8D9AFF6F8D9AFF6F8D9ACA6F8D9AFFA08D69A19A%FFA16969CAA1CAFFFF6969A8FF93696FC3A0FFA18D69CAA08D69FD05FFA1%8D69A19A8D69CAFF9A6894A89A6893FD05FF9A689AFD07FFCAA1CA93696F%FFCA8D68C3A79368C9FF9A689AA193689AFF938DA1FF9A8D9AFFA18D6FFF%CA8D69FFFF9A68C3FFA1689ACF8D69FFFF8D699AA19A689AFFC36894FFFF%FFCA698D93CAFFFFCA9369CAFF9A69C3FFFFFF9A6894A1A1698DCAFD04FF%9A689AFFFF698DC9FF6F8D93C39A8D69FD05FF938D9AFD07FFCAC39A9A69%94FFCA698D9AC3938D9AFF9A8D9AFFA18D6FCA9368A1FF9A68A0FFCA6893%FFFF6969A8FF6F699AFFA869699A6893FFCA6869688D68696FFFA16969FD%04FFA16969689AFFFF688DA8FF6F699AFFFFFF6F69688D686968CAFD04FF%93699AFFCA8D68CAFF93688D68696893CAFD04FF9A6893FD06FFA78D6869%688D6FFFA08D6869688D68A0FF9A689AFFC36893FF938D9AFF9A8D9AFFC9%8D6FFFFF9369FFFF9A69C3FFFF938D698DA1FFCF9369C2CAFFCAFFFFC369%94FD06FF9A8D69FFFF9369CFFF9A699AFFFFFF9A6994CAFFCACAFD05FFA0%699AFFFF698DC9FF938D93FFCACACAFD05FFA08D69C3FFFFFFCAFFC3699A%FFCA6993FFCA698DA1FFCACACAFF9A8D9AFFA18D93FF9A688D6F93689AFF%CA6893FFFF6969A8FF93699AFFFFC3688D69FFFFFF9A69689A9A93A7FFA1%6969FFFFFFA1939A9A688DCAFF688DA8FF9A8D69936FFFA869689A9A939A%FD05FFA8696894996968CAFFA1688D939A6FC3FD06FF698D68936F9369FF%A08D69A0938D6FFFFF9368939A9A6FFFFF9A689AFFC36893FFCA9A698D69%8DA1FFA18D93FFFF9369CFFF9A69A1FFFFFF9368C3FD04FF9A8D688D69CA%FFC36993FFFFFFC3688D698D9AFFFF9369CFFFFF938D698DA8FFA193688D%699AFD06FFA193688D6993A7FFFFA1698D698D9AFD06FFCF938D698D6993%CAFF938D698D699AFFFFCA9A698D6893CFFF9A8D9AFFA18D93FFFFFFCAA1%CAA8FFFFFFA8FFFFFFA8CFFFFFA8CACAFFFFFFCACACAFD05FFA8A1A1CAFF%FFA8CFA8FFFFFFCFCAA1C3A8FFFFFFA8CAA8FFFFFFA1CAA8FFFFFFCAC3A1%CACAFD07FFCAC3A1CAA8FD04FFCAA1C3A8FD09FFA7C3A1CAA8FFFFFFA7CA%A1CAA8FD04FFCAA1C9A8FFFFFFA8FFFFFFA8FDFCFFFDFCFFFD78FFCAC39A%FFFFFF9ACAFD0AFFCA9A9A939AA0FD2BFF9AA0CAFFFFFF9AA0CAFD34FFC9%6893FFFF9A6969FD0AFF938D698D688D93FD29FFA88D699AFFFFFF8D68CA%FD34FFCA8D6FFFFFCA6FC3FD0AFF9A689AA7C368699AFFFFFFA1A19ACAFD%05FFC39AC3A8FFFFFFA8A19AC9CAFFCAFFFFC39ACAFD09FFCA688D689AFF%FF6969A1FFFFFFA8C39AC9FD04FFA8CAA1A1A1FFFFCAA1C3A1CAA8CAA1CA%FD04FFA7C39AA1A8FFFFFFA8CAA1A1A1FD06FFC3A1A16893CAFFCAC9A8FD%04FFCAA0A1A8FFFF9A8D9AFFFF9469C3FFFFA18D698D69A1FFFFFF9A698D%6994FFFFC993698D69C3FFFFCA94698D699AFD08FFCA93698D69CAFF9369%CAFFFFCA94698D699AFFFFFFC3698D698DCAFF938D698D6994698D69C3FF%FFFF93698D6994CAFFFFC3698D698D93FD04FF9A698D698D6FFFFFC3699A%FFFFFFC3698D6993CAFF9A689393936893CAFFFFCA9AA19A8D69CAFFC968%8DA0A0A1FFFF9A689AA19AA8FFFF9A689A9A9368C3FD07FFCA6893936969%FF6969A1FFFF9A6893938D68A1FFFF938D6F9A93FFFF93689A6F69689A6F%6969FFFFFF9AA1A193689AFFFF938D6F9A698D9AFFFFA1688D9A946893FF%FFA1696FFFFFC36893A09A689AFF9A8D698D698D69CAFD04FFA1C3698DA1%FFA18D69A1CFFFFFFF938D93CAFFFFFFCA698DA1CF938D9AFFA19493949A%FFCA8D69FF9A8D939369CAFFCA698DA8FFA18D69FFFF9A68C3FD04FF938D%A8FF698DA8FF698DA8FFFFFFA1CA938D93FFFF9A68C3FFA1689AFFFF6F8D%A1FFA18D93FFFFC3699AFFFF938D93FFA18D69FF9A689AA8CA936969FFFF%A0688D686968CAFFFF6F8D68699AFFFFCA69696893A8FFA169688D686968%9AFFA168696893FFCA6869A8FF6969688DA1FFA18D69FFFFCA6869A8FF9A%699AFFFFFFCA9368CAFF8D68CAFF8D68C9FFCA6969688D6893FFFF9A699A%FF9A696FFFCA8D68CAFFC96893FFFFA0696FFFCA936869688D6869FF9A8D%9AFFFFC36993FFFF698DA1FF6F8DC9FFFFFFCA9A698DCAFFFFFFA193699A%FFCA698DA0FD04CAFFCACAA1CAA8FFCA8D69CFFFC3698D69CAFFCA698DCA%FFA18D69FFFF9A68C3FD04FF938DA7FF698DA7FF698DA1FF9A8D93FFA08D%93FFFF9A68C3FFC3699AFFFF6F8DA1FFCA8D93FFFFC3699AFFFF938D93CA%CACAA1FF9A6893A09A69696FFFCA8D68A1A19368CAFFCA9ACAA06968CAFF%A19ACA93696FFFFF936894A1A19AFD08FFCA6969A8FFFF94688DA1FFFF93%68939A93689AFFFF9A699AFD04FF9368CAFF8D68CAFF8D68C9FF9A6893A1%A06893FFFF9A699AFF9A696FFFFF9A68939A9A6893FFFFA08D93FFFFA168%8D9AC99ACAFF9A8D698D688D93CAFFFF9A8D688D698DA1FFA18D688D699A%FFFF938D688D69C3FFFFCA93688D698DA8FD07FFA88D69CAFFFFCA8D68CA%FFFFA893698D689AFFFFFF9A69A1FD04FF698DA7FF698DA7FF698DA1FFA8%93698D688D93FFFF9A69A1FFC3699AFFFFFF9A688D698D6FFFFFC3689AFF%FFFF9A698D688D9AFFCAA0A19AA1A1FD05FFA1A19AA1A1FFFFFFA0A09AC3%FFFFFFCA9AA09ACAFD04FFCAA19AA1A1FD09FFA1C3CAFFFFFFA1A1A8FFFF%FFA8A19AA1CAFFFFFFA1A1A8FD04FFC3A0FFFFA1A0FFFFA1A0FFFFFFA8C3%9AA1A1CAFFFFA1A1A8FFA7A1A1FD04FFC39AA1A0CAFFFFA8A1A1FD04FFC9%9AA09ACA%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 200 C)
%%CMYKCustomColor: 0 1 0.6500 0.2000 (PANTONE 200 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">unicaen 2011</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2012-02-10T14:17:02+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2012-02-10T14:17:02+01:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-02-10T14:17:02+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>164</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqwHz/8AnR5P8nM9pNIdQ1dR/wAc62ILKe3rOfhj+W7e2VyyAO30HY2bU7j0w7z+&#xA;jveE+Z/+cjPzB1d3TT5Y9FtCTxjtlDy8f8qaQE190C5WZEvV6X2d02P6hxnz5fL+159qPmLzHq0h&#xA;Ooald3zuaUnmklrXalGJyBDuMenxYx6Yxj7gFsOi6+Ck0Fhdggho5Eik2INQQQMeIJlmx8jKPzD7&#xA;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&#xA;q37z7dMr283pNd/KHgy4vC4eE3XFyrf6tn//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1CF437E14C40E111A671E6DD2891559A</stEvt:instanceID>
                  <stEvt:when>2012-01-16T15:17:53+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1DF437E14C40E111A671E6DD2891559A</stEvt:instanceID>
                  <stEvt:when>2012-01-16T15:19:39+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FE320071168B481AF57C9BCB0F1</stEvt:instanceID>
                  <stEvt:when>2012-02-10T14:15:37+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FE420071168B481AF57C9BCB0F1</stEvt:instanceID>
                  <stEvt:when>2012-02-10T14:16:31+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FE520071168B481AF57C9BCB0F1</stEvt:instanceID>
                  <stEvt:when>2012-02-10T14:17:02+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:256FC74E3C3911E09DD5F733581258C8</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:74117FE420071168B481AF57C9BCB0F1</stRef:instanceID>
            <stRef:documentID>xmp.did:74117FE420071168B481AF57C9BCB0F1</stRef:documentID>
            <stRef:originalDocumentID>uuid:256FC74E3C3911E09DD5F733581258C8</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:InstanceID>xmp.iid:74117FE520071168B481AF57C9BCB0F1</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:74117FE520071168B481AF57C9BCB0F1</xmpMM:DocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 7.77</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>296.999959</stDim:w>
            <stDim:h>210.000274</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 200 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par défaut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 200 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>20.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -201.187 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 201.187 li
316.037 201.187 li
316.037 0 li
cp
clp
[1 0 0 1 0 0 ]ct
123.471 154.772 mo
123.3 154.208 123.004 153.692 122.585 153.228 cv
122.166 152.763 121.593 152.335 120.868 151.938 cv
120.142 151.546 119.224 151.144 118.11 150.739 cv
117.566 150.536 117.119 150.349 116.766 150.183 cv
116.415 150.013 116.137 149.853 115.931 149.706 cv
115.726 149.56 115.588 149.405 115.52 149.247 cv
115.452 149.091 115.417 148.909 115.417 148.706 cv
115.417 147.825 116.211 147.382 117.802 147.382 cv
118.665 147.382 119.441 147.462 120.136 147.62 cv
120.828 147.78 121.469 147.96 122.06 148.165 cv
122.943 144.211 li
122.353 143.987 121.561 143.776 120.563 143.583 cv
119.565 143.39 118.521 143.294 117.433 143.294 cv
115.257 143.294 113.544 143.782 112.297 144.756 cv
111.051 145.731 110.427 147.06 110.427 148.735 cv
110.427 149.597 110.552 150.335 110.801 150.944 cv
111.051 151.558 111.401 152.085 111.855 152.528 cv
112.31 152.97 112.859 153.347 113.507 153.663 cv
114.154 153.981 114.874 154.284 115.668 154.577 cv
116.689 154.96 117.452 155.302 117.954 155.608 cv
118.457 155.915 118.708 156.271 118.708 156.679 cv
118.708 157.196 118.515 157.548 118.128 157.729 cv
117.743 157.907 117.083 157.999 116.15 157.999 cv
115.266 157.999 114.368 157.903 113.458 157.71 cv
112.55 157.517 111.664 157.253 110.801 156.913 cv
109.952 161.026 li
110.359 161.208 111.091 161.435 112.144 161.706 cv
113.198 161.976 114.52 162.114 116.106 162.114 cv
118.534 162.114 120.41 161.661 121.735 160.757 cv
123.062 159.849 123.726 158.511 123.726 156.743 cv
123.726 155.997 123.64 155.341 123.471 154.772 cv
138.428 191.06 mo
137.608 189.835 136.731 188.562 135.801 187.237 cv
134.868 185.913 133.93 184.632 132.985 183.397 cv
132.042 182.165 131.115 181.003 130.206 179.917 cv
129.294 178.827 128.466 177.911 127.716 177.163 cv
123.404 177.163 li
123.404 200.706 li
128.633 200.706 li
128.633 185.284 li
130.635 187.618 132.521 190.099 134.295 192.724 cv
136.069 195.353 137.719 198.013 139.243 200.706 cv
143.683 200.706 li
143.683 177.163 li
138.428 177.163 li
138.428 191.06 li
cp
150.307 157.185 mo
149.831 157.366 149.305 157.509 148.727 157.61 cv
148.149 157.71 147.59 157.761 147.046 157.761 cv
145.916 157.761 145.163 157.442 144.789 156.81 cv
144.415 156.179 144.229 155.329 144.229 154.267 cv
144.229 147.991 li
150.307 147.991 li
150.307 143.773 li
144.229 143.773 li
144.229 138.516 li
139.159 139.331 li
139.159 154.333 li
139.159 155.483 139.267 156.538 139.48 157.487 cv
139.696 158.437 140.077 159.247 140.62 159.913 cv
141.165 160.581 141.89 161.101 142.795 161.476 cv
143.701 161.845 144.846 162.032 146.228 162.032 cv
147.315 162.032 148.232 161.944 148.981 161.763 cv
149.727 161.581 150.408 161.366 151.021 161.116 cv
150.307 157.185 li
cp
159.123 150.886 mo
159.19 150.456 159.299 150.034 159.445 149.614 cv
159.592 149.198 159.801 148.829 160.073 148.513 cv
160.346 148.196 160.685 147.944 161.093 147.751 cv
161.499 147.558 161.985 147.462 162.551 147.462 cv
163.14 147.462 163.631 147.563 164.028 147.769 cv
164.425 147.972 164.751 148.229 165.013 148.548 cv
165.272 148.864 165.466 149.228 165.59 149.632 cv
165.715 150.04 165.789 150.456 165.812 150.886 cv
159.123 150.886 li
cp
162.477 143.294 mo
161.391 143.294 160.332 143.499 159.302 143.907 cv
158.272 144.315 157.361 144.913 156.568 145.705 cv
155.776 146.501 155.138 147.491 154.65 148.679 cv
154.163 149.866 153.92 151.257 153.92 152.841 cv
153.92 154.153 154.105 155.378 154.479 156.509 cv
154.853 157.642 155.43 158.622 156.211 159.448 cv
156.991 160.274 157.977 160.925 159.164 161.401 cv
160.352 161.876 161.749 162.114 163.354 162.114 cv
163.988 162.114 164.62 162.077 165.255 162.013 cv
165.889 161.944 166.482 161.86 167.036 161.757 cv
167.59 161.655 168.095 161.536 168.546 161.401 cv
168.999 161.265 169.361 161.128 169.634 160.991 cv
168.953 156.878 li
168.39 157.128 167.658 157.335 166.767 157.509 cv
165.874 157.675 164.964 157.761 164.037 157.761 cv
162.591 157.761 161.438 157.454 160.58 156.845 cv
159.722 156.233 159.235 155.403 159.123 154.362 cv
170.594 154.362 li
170.614 154.095 170.638 153.782 170.66 153.431 cv
170.683 153.079 170.694 152.755 170.694 152.462 cv
170.694 149.45 169.959 147.173 168.487 145.619 cv
167.016 144.068 165.013 143.294 162.477 143.294 cv
161.606 195.456 mo
160.987 196.376 160.103 196.831 158.955 196.831 cv
157.809 196.831 156.918 196.376 156.288 195.456 cv
155.657 194.542 155.342 193.304 155.342 191.741 cv
155.342 190.181 155.657 188.954 156.288 188.06 cv
156.918 187.165 157.809 186.72 158.955 186.72 cv
160.103 186.72 160.987 187.165 161.606 188.06 cv
162.226 188.954 162.534 190.181 162.534 191.741 cv
162.534 193.304 162.226 194.542 161.606 195.456 cv
165.267 184.948 mo
164.498 184.132 163.575 183.499 162.501 183.046 cv
161.428 182.593 160.244 182.366 158.955 182.366 cv
157.689 182.366 156.52 182.593 155.442 183.046 cv
154.368 183.499 153.44 184.132 152.66 184.948 cv
151.879 185.763 151.269 186.749 150.827 187.903 cv
150.387 189.06 150.166 190.339 150.166 191.741 cv
150.166 193.146 150.38 194.433 150.811 195.599 cv
151.24 196.765 151.838 197.761 152.608 198.587 cv
153.378 199.415 154.3 200.052 155.376 200.507 cv
156.45 200.956 157.644 201.187 158.955 201.187 cv
160.289 201.187 161.494 200.956 162.569 200.507 cv
163.643 200.052 164.563 199.415 165.335 198.587 cv
166.103 197.761 166.69 196.765 167.101 195.599 cv
167.507 194.433 167.71 193.146 167.71 191.741 cv
167.71 190.339 167.495 189.06 167.064 187.903 cv
166.634 186.749 166.036 185.763 165.267 184.948 cv
107.75 193.224 mo
117.598 193.224 li
117.598 188.63 li
107.75 188.63 li
107.75 193.224 li
cp
79.4688 149.614 mo
79.6147 149.198 79.8247 148.829 80.0967 148.513 cv
80.3677 148.196 80.7065 147.944 81.1147 147.751 cv
81.5225 147.558 82.0098 147.462 82.5747 147.462 cv
83.1626 147.462 83.6558 147.563 84.0518 147.769 cv
84.4487 147.972 84.7754 148.229 85.0366 148.548 cv
85.2974 148.864 85.4897 149.228 85.6147 149.632 cv
85.7378 150.04 85.8115 150.456 85.8345 150.886 cv
79.1455 150.886 li
79.2148 150.456 79.3218 150.034 79.4688 149.614 cv
88.5718 161.401 mo
89.0225 161.265 89.3857 161.128 89.6567 160.991 cv
88.9775 156.878 li
88.4126 157.128 87.6836 157.335 86.7915 157.509 cv
85.8984 157.675 84.9878 157.761 84.0615 157.761 cv
82.6157 157.761 81.4624 157.454 80.6025 156.845 cv
79.7446 156.233 79.2588 155.403 79.1455 154.362 cv
90.6167 154.362 li
90.6406 154.095 90.6616 153.782 90.6846 153.431 cv
90.7075 153.079 90.7197 152.755 90.7197 152.462 cv
90.7197 149.45 89.9824 147.173 88.5127 145.619 cv
87.0396 144.068 85.0356 143.294 82.5005 143.294 cv
81.4136 143.294 80.3555 143.499 79.3257 143.907 cv
78.2954 144.315 77.3838 144.913 76.5918 145.705 cv
75.7998 146.501 75.1597 147.491 74.6738 148.679 cv
74.1865 149.866 73.9434 151.257 73.9434 152.841 cv
73.9434 154.153 74.1294 155.378 74.5034 156.509 cv
74.8765 157.642 75.4546 158.622 76.2324 159.448 cv
77.0146 160.274 77.9976 160.925 79.1855 161.401 cv
80.3735 161.876 81.7705 162.114 83.3784 162.114 cv
84.0117 162.114 84.6436 162.077 85.2773 162.013 cv
85.9116 161.944 86.5054 161.86 87.0605 161.757 cv
87.6147 161.655 88.1177 161.536 88.5718 161.401 cv
79.6147 192.298 mo
79.1943 191.833 78.6216 191.405 77.8955 191.011 cv
77.1704 190.616 76.2524 190.214 75.1406 189.81 cv
74.5947 189.606 74.1455 189.423 73.7944 189.253 cv
73.4434 189.083 73.1655 188.925 72.9595 188.778 cv
72.7534 188.63 72.6177 188.478 72.5474 188.321 cv
72.4785 188.159 72.4443 187.981 72.4443 187.776 cv
72.4443 186.896 73.2397 186.454 74.8296 186.454 cv
75.6924 186.454 76.4717 186.534 77.1646 186.692 cv
77.8545 186.851 78.4985 187.032 79.0898 187.233 cv
79.9717 183.284 li
79.3828 183.058 78.5884 182.847 77.5908 182.655 cv
76.5938 182.462 75.5498 182.366 74.4614 182.366 cv
72.2856 182.366 70.5728 182.854 69.3257 183.829 cv
68.0786 184.802 67.4546 186.13 67.4546 187.808 cv
67.4546 188.669 67.5796 189.403 67.8296 190.017 cv
68.0796 190.63 68.4316 191.157 68.8848 191.599 cv
69.3374 192.042 69.8887 192.419 70.5356 192.735 cv
71.1816 193.05 71.9014 193.354 72.6968 193.646 cv
73.7178 194.03 74.4795 194.376 74.9824 194.683 cv
75.4854 194.985 75.7378 195.339 75.7378 195.747 cv
75.7378 196.269 75.5435 196.616 75.1567 196.802 cv
74.7695 196.979 74.1113 197.071 73.1807 197.071 cv
72.2935 197.071 71.3955 196.974 70.4863 196.784 cv
69.5786 196.591 68.6914 196.321 67.8296 195.985 cv
66.9795 200.099 li
67.3877 200.278 68.1187 200.505 69.1738 200.778 cv
70.2275 201.05 71.5474 201.187 73.1348 201.187 cv
75.5615 201.187 77.4385 200.733 78.7637 199.825 cv
80.0908 198.921 80.7524 197.585 80.7524 195.815 cv
80.7524 195.069 80.6685 194.411 80.4985 193.845 cv
80.3276 193.28 80.0327 192.763 79.6147 192.298 cv
105.139 143.589 mo
104.751 143.532 104.368 143.484 103.981 143.452 cv
103.597 143.416 103.268 143.401 102.997 143.401 cv
101.477 143.401 100.102 143.541 98.8667 143.824 cv
97.6318 144.109 96.5605 144.41 95.6538 144.726 cv
95.6538 161.638 li
100.725 161.638 li
100.725 148.001 li
100.951 147.933 101.284 147.87 101.726 147.813 cv
102.167 147.757 102.545 147.728 102.865 147.728 cv
103.565 147.728 104.222 147.79 104.833 147.915 cv
105.444 148.04 105.978 148.159 106.431 148.272 cv
107.281 144.08 li
107.008 143.967 106.68 143.871 106.293 143.791 cv
105.908 143.714 105.523 143.646 105.139 143.589 cv
91.1138 189.958 mo
91.1826 189.528 91.2896 189.103 91.4365 188.687 cv
91.5835 188.271 91.7925 187.901 92.0645 187.583 cv
92.3364 187.271 92.6768 187.015 93.0825 186.823 cv
93.4907 186.63 93.9766 186.534 94.5425 186.534 cv
95.1328 186.534 95.6235 186.636 96.0205 186.839 cv
96.4165 187.044 96.7446 187.302 97.0044 187.618 cv
97.2656 187.937 97.4585 188.296 97.5815 188.704 cv
97.7065 189.11 97.7798 189.528 97.8027 189.958 cv
91.1138 189.958 li
cp
94.4688 182.366 mo
93.3818 182.366 92.3237 182.569 91.2935 182.978 cv
90.2637 183.386 89.3525 183.987 88.5596 184.778 cv
87.7676 185.569 87.1294 186.562 86.6416 187.749 cv
86.1548 188.94 85.9116 190.327 85.9116 191.911 cv
85.9116 193.226 86.0977 194.45 86.4717 195.581 cv
86.8457 196.712 87.4204 197.694 88.2026 198.519 cv
88.9824 199.347 89.9678 199.995 91.1558 200.472 cv
92.3438 200.948 93.7407 201.187 95.3467 201.187 cv
95.9785 201.187 96.6138 201.149 97.2466 201.085 cv
97.8818 201.013 98.4756 200.931 99.0288 200.829 cv
99.5825 200.726 100.086 200.608 100.539 200.472 cv
100.992 200.335 101.354 200.2 101.625 200.063 cv
100.946 195.946 li
100.382 196.196 99.6504 196.409 98.7578 196.577 cv
97.8667 196.747 96.9565 196.831 96.0298 196.831 cv
94.5825 196.831 93.4297 196.528 92.5728 195.915 cv
91.7134 195.304 91.2266 194.476 91.1138 193.435 cv
102.585 193.435 li
102.606 193.163 102.63 192.851 102.652 192.499 cv
102.676 192.151 102.687 191.827 102.687 191.532 cv
102.687 188.522 101.951 186.243 100.479 184.692 cv
99.0078 183.142 97.0044 182.366 94.4688 182.366 cv
183.366 182.659 mo
182.981 182.603 182.596 182.558 182.212 182.524 cv
181.825 182.489 181.498 182.472 181.225 182.472 cv
179.705 182.472 178.33 182.614 177.095 182.897 cv
175.859 183.181 174.789 183.479 173.883 183.8 cv
173.883 200.706 li
178.952 200.706 li
178.952 187.071 li
179.179 187.001 179.512 186.938 179.954 186.882 cv
180.396 186.827 180.774 186.8 181.093 186.8 cv
181.794 186.8 182.451 186.862 183.062 186.987 cv
183.673 187.112 184.205 187.228 184.658 187.345 cv
185.509 183.149 li
185.236 183.036 184.907 182.942 184.521 182.86 cv
184.138 182.784 183.752 182.716 183.366 182.659 cv
283.436 150.886 mo
283.507 150.456 283.611 150.034 283.76 149.614 cv
283.906 149.198 284.114 148.829 284.388 148.513 cv
284.659 148.196 284.998 147.944 285.406 147.751 cv
285.813 147.558 286.299 147.462 286.864 147.462 cv
287.455 147.462 287.948 147.563 288.341 147.769 cv
288.74 147.972 289.067 148.229 289.33 148.548 cv
289.589 148.864 289.782 149.228 289.907 149.632 cv
290.029 150.04 290.104 150.456 290.127 150.886 cv
283.436 150.886 li
cp
286.793 143.294 mo
285.705 143.294 284.647 143.499 283.617 143.907 cv
282.587 144.315 281.673 144.913 280.882 145.705 cv
280.09 146.501 279.452 147.491 278.965 148.679 cv
278.477 149.866 278.232 151.257 278.232 152.841 cv
278.232 154.153 278.423 155.378 278.795 156.509 cv
279.167 157.642 279.744 158.622 280.524 159.448 cv
281.304 160.274 282.289 160.925 283.478 161.401 cv
284.664 161.876 286.062 162.114 287.669 162.114 cv
288.303 162.114 288.937 162.077 289.567 162.013 cv
290.205 161.944 290.797 161.86 291.354 161.757 cv
291.907 161.655 292.407 161.536 292.86 161.401 cv
293.313 161.265 293.676 161.128 293.949 160.991 cv
293.271 156.878 li
292.702 157.128 291.973 157.335 291.08 157.509 cv
290.189 157.675 289.278 157.761 288.353 157.761 cv
286.906 157.761 285.751 157.454 284.895 156.845 cv
284.037 156.233 283.549 155.403 283.436 154.362 cv
294.908 154.362 li
294.932 154.095 294.952 153.782 294.974 153.431 cv
294.998 153.079 295.009 152.755 295.009 152.462 cv
295.009 149.45 294.273 147.173 292.8 145.619 cv
291.33 144.068 289.326 143.294 286.793 143.294 cv
288.05 200.706 mo
293.118 200.706 li
293.118 182.843 li
288.05 182.843 li
288.05 200.706 li
cp
290.567 174.696 mo
289.748 174.696 289.044 174.962 288.442 175.493 cv
287.841 176.024 287.537 176.753 287.537 177.683 cv
287.537 178.608 287.841 179.339 288.442 179.87 cv
289.044 180.403 289.748 180.667 290.567 180.667 cv
291.384 180.667 292.092 180.403 292.693 179.87 cv
293.294 179.339 293.592 178.608 293.592 177.683 cv
293.592 176.753 293.294 176.024 292.693 175.493 cv
292.092 174.962 291.384 174.696 290.567 174.696 cv
304.466 189.958 mo
304.534 189.528 304.642 189.103 304.789 188.687 cv
304.934 188.271 305.145 187.901 305.416 187.583 cv
305.687 187.271 306.029 187.015 306.434 186.823 cv
306.842 186.63 307.327 186.534 307.896 186.534 cv
308.481 186.534 308.976 186.636 309.373 186.839 cv
309.768 187.044 310.095 187.302 310.357 187.618 cv
310.616 187.937 310.81 188.296 310.935 188.704 cv
311.06 189.11 311.131 189.528 311.155 189.958 cv
304.466 189.958 li
cp
313.83 184.692 mo
312.357 183.142 310.357 182.366 307.821 182.366 cv
306.734 182.366 305.678 182.569 304.645 182.978 cv
303.614 183.386 302.705 183.987 301.912 184.778 cv
301.117 185.569 300.48 186.562 299.992 187.749 cv
299.504 188.94 299.263 190.327 299.263 191.911 cv
299.263 193.226 299.45 194.45 299.822 195.581 cv
300.194 196.712 300.772 197.694 301.552 198.519 cv
302.335 199.347 303.32 199.995 304.505 200.472 cv
305.695 200.948 307.089 201.187 308.696 201.187 cv
309.333 201.187 309.964 201.149 310.599 201.085 cv
311.232 201.013 311.824 200.931 312.381 200.829 cv
312.935 200.726 313.438 200.608 313.891 200.472 cv
314.343 200.335 314.703 200.2 314.977 200.063 cv
314.298 195.946 li
313.732 196.196 313.003 196.409 312.11 196.577 cv
311.221 196.747 310.31 196.831 309.381 196.831 cv
307.935 196.831 306.782 196.528 305.922 195.915 cv
305.064 195.304 304.576 194.476 304.466 193.435 cv
315.936 193.435 li
315.959 193.163 315.983 192.851 316.004 192.499 cv
316.024 192.151 316.037 191.827 316.037 191.532 cv
316.037 188.522 315.305 186.243 313.83 184.692 cv
71.5146 143.773 mo
66.2817 143.773 li
66.0557 144.657 65.7905 145.613 65.4854 146.644 cv
65.1787 147.673 64.8613 148.716 64.5347 149.767 cv
64.2056 150.819 63.8716 151.843 63.5327 152.841 cv
63.1943 153.839 62.8774 154.743 62.5825 155.56 cv
62.2666 154.743 61.9424 153.839 61.6177 152.841 cv
61.2886 151.843 60.9604 150.819 60.6338 149.767 cv
60.3066 148.716 59.9888 147.673 59.6836 146.644 cv
59.3784 145.613 59.1138 144.657 58.8867 143.773 cv
53.5186 143.773 li
54.5815 147.353 55.7056 150.655 56.8916 153.688 cv
58.0776 156.726 59.2476 159.372 60.4004 161.638 cv
64.6284 161.638 li
65.7808 159.372 66.9517 156.726 68.1396 153.688 cv
69.3257 150.655 70.4507 147.353 71.5146 143.773 cv
275.952 196.665 mo
275.708 196.71 275.393 196.747 275.012 196.78 cv
274.627 196.815 274.211 196.831 273.761 196.831 cv
272.389 196.831 271.356 196.354 270.656 195.405 cv
269.957 194.456 269.611 193.2 269.611 191.636 cv
269.611 188.378 270.802 186.745 273.187 186.745 cv
273.705 186.745 274.217 186.813 274.723 186.952 cv
275.229 187.085 275.64 187.255 275.952 187.46 cv
275.952 196.665 li
cp
275.952 183.255 mo
275.39 183.005 274.83 182.813 274.279 182.677 cv
273.726 182.54 273.098 182.472 272.397 182.472 cv
271.13 182.472 270.008 182.688 269.025 183.118 cv
268.043 183.55 267.212 184.171 266.533 184.987 cv
265.858 185.802 265.337 186.794 264.977 187.958 cv
264.616 189.128 264.435 190.435 264.435 191.884 cv
264.435 193.31 264.644 194.595 265.063 195.739 cv
265.479 196.884 266.087 197.858 266.879 198.661 cv
267.671 199.466 268.642 200.081 269.796 200.513 cv
270.948 200.942 272.261 201.159 273.731 201.159 cv
274.339 201.159 274.981 201.13 275.648 201.073 cv
276.315 201.017 276.97 200.942 277.613 200.853 cv
278.259 200.763 278.875 200.653 279.465 200.53 cv
280.051 200.405 280.572 200.274 281.024 200.138 cv
281.024 174.351 li
275.952 175.163 li
275.952 183.255 li
cp
189.937 156.335 mo
189.239 155.384 188.895 154.126 188.895 152.563 cv
188.895 149.304 190.085 147.673 192.47 147.673 cv
192.984 147.673 193.496 147.741 194.003 147.878 cv
194.509 148.015 194.919 148.185 195.235 148.388 cv
195.235 157.591 li
194.987 157.636 194.675 157.675 194.291 157.71 cv
193.907 157.743 193.49 157.761 193.044 157.761 cv
191.669 157.761 190.633 157.284 189.937 156.335 cv
194.929 162.003 mo
195.595 161.946 196.253 161.872 196.896 161.782 cv
197.542 161.69 198.158 161.583 198.748 161.458 cv
199.33 161.333 199.854 161.202 200.308 161.069 cv
200.308 135.276 li
195.235 136.093 li
195.235 144.181 li
194.669 143.934 194.112 143.74 193.559 143.604 cv
193.005 143.47 192.377 143.401 191.678 143.401 cv
190.414 143.401 189.289 143.615 188.308 144.047 cv
187.324 144.479 186.493 145.101 185.818 145.913 cv
185.14 146.729 184.62 147.724 184.258 148.888 cv
183.896 150.054 183.717 151.362 183.717 152.812 cv
183.717 154.239 183.925 155.526 184.345 156.669 cv
184.763 157.812 185.368 158.786 186.159 159.593 cv
186.95 160.394 187.923 161.013 189.076 161.44 cv
190.228 161.872 191.544 162.087 193.015 162.087 cv
193.621 162.087 194.262 162.06 194.929 162.003 cv
213.75 184.698 mo
213.202 183.972 212.474 183.411 211.557 183.017 cv
210.637 182.616 209.464 182.421 208.039 182.421 cv
207.243 182.421 206.377 182.567 205.439 182.86 cv
204.498 183.155 203.664 183.563 202.938 184.085 cv
202.418 183.632 201.754 183.239 200.95 182.911 cv
200.146 182.585 199.099 182.421 197.807 182.421 cv
197.149 182.421 196.479 182.448 195.801 182.505 cv
195.123 182.562 194.458 182.642 193.812 182.741 cv
193.166 182.843 192.556 182.96 191.979 183.081 cv
191.397 183.206 190.895 183.325 190.466 183.438 cv
190.466 200.706 li
195.532 200.706 li
195.532 186.915 li
195.851 186.87 196.179 186.829 196.518 186.796 cv
196.857 186.765 197.185 186.745 197.503 186.745 cv
198.521 186.745 199.238 187.085 199.658 187.765 cv
200.075 188.446 200.283 189.601 200.283 191.229 cv
200.283 200.706 li
205.355 200.706 li
205.355 190.958 li
205.355 190.3 205.332 189.685 205.287 189.106 cv
205.243 188.528 205.139 187.981 204.98 187.46 cv
205.296 187.255 205.701 187.085 206.187 186.952 cv
206.672 186.813 207.053 186.745 207.323 186.745 cv
208.342 186.745 209.059 187.085 209.479 187.765 cv
209.898 188.446 210.106 189.601 210.106 191.229 cv
210.106 200.706 li
215.176 200.706 li
215.176 190.61 li
215.176 189.39 215.071 188.276 214.869 187.278 cv
214.667 186.282 214.292 185.421 213.75 184.698 cv
210.779 149.614 mo
210.929 149.198 211.137 148.829 211.407 148.513 cv
211.679 148.196 212.018 147.944 212.429 147.751 cv
212.833 147.558 213.321 147.462 213.887 147.462 cv
214.477 147.462 214.968 147.563 215.363 147.769 cv
215.76 147.972 216.09 148.229 216.349 148.548 cv
216.607 148.864 216.802 149.228 216.927 149.632 cv
217.048 150.04 217.123 150.456 217.146 150.886 cv
210.458 150.886 li
210.526 150.456 210.634 150.034 210.779 149.614 cv
220.289 156.878 mo
219.725 157.128 218.995 157.335 218.103 157.509 cv
217.209 157.675 216.298 157.761 215.373 157.761 cv
213.926 157.761 212.773 157.454 211.917 156.845 cv
211.056 156.233 210.571 155.403 210.458 154.362 cv
221.931 154.362 li
221.951 154.095 221.972 153.782 221.996 153.431 cv
222.02 153.079 222.031 152.755 222.031 152.462 cv
222.031 149.45 221.293 147.173 219.822 145.619 cv
218.353 144.068 216.349 143.294 213.813 143.294 cv
212.727 143.294 211.666 143.499 210.637 143.907 cv
209.606 144.315 208.695 144.913 207.903 145.705 cv
207.112 146.501 206.472 147.491 205.987 148.679 cv
205.499 149.866 205.255 151.257 205.255 152.841 cv
205.255 154.153 205.442 155.378 205.814 156.509 cv
206.189 157.642 206.767 158.622 207.547 159.448 cv
208.326 160.274 209.312 160.925 210.499 161.401 cv
211.688 161.876 213.083 162.114 214.69 162.114 cv
215.322 162.114 215.959 162.077 216.59 162.013 cv
217.224 161.944 217.816 161.86 218.373 161.757 cv
218.927 161.655 219.43 161.536 219.882 161.401 cv
220.335 161.265 220.698 161.128 220.969 160.991 cv
220.289 156.878 li
cp
231.337 197.042 mo
231.063 197.087 230.7 197.12 230.248 197.144 cv
229.792 197.165 229.315 197.177 228.815 197.177 cv
227.884 197.177 227.151 197.024 226.615 196.718 cv
226.083 196.415 225.817 195.866 225.817 195.077 cv
225.817 194.671 225.907 194.333 226.092 194.06 cv
226.271 193.788 226.521 193.575 226.839 193.417 cv
227.157 193.259 227.526 193.151 227.946 193.095 cv
228.366 193.038 228.815 193.009 229.295 193.009 cv
229.634 193.009 230.009 193.032 230.42 193.077 cv
230.825 193.126 231.134 193.169 231.337 193.214 cv
231.337 197.042 li
cp
234.546 184.335 mo
233.947 183.7 233.146 183.216 232.152 182.876 cv
231.158 182.536 229.911 182.366 228.417 182.366 cv
227.83 182.366 227.243 182.394 226.669 182.45 cv
226.092 182.507 225.541 182.575 225.021 182.655 cv
224.499 182.733 224.02 182.825 223.576 182.927 cv
223.136 183.028 222.767 183.124 222.472 183.216 cv
223.118 187.3 li
223.729 187.073 224.454 186.897 225.294 186.772 cv
226.128 186.651 226.979 186.585 227.842 186.585 cv
229.131 186.585 230.036 186.847 230.557 187.368 cv
231.078 187.892 231.337 188.579 231.337 189.442 cv
231.337 189.919 li
231.021 189.827 230.607 189.753 230.099 189.696 cv
229.587 189.64 229.003 189.612 228.348 189.612 cv
227.373 189.612 226.431 189.708 225.526 189.901 cv
224.618 190.095 223.814 190.403 223.112 190.833 cv
222.406 191.265 221.847 191.839 221.431 192.562 cv
221.011 193.286 220.799 194.169 220.799 195.208 cv
220.799 196.296 220.983 197.212 221.344 197.96 cv
221.707 198.706 222.228 199.308 222.906 199.772 cv
223.585 200.237 224.395 200.569 225.336 200.774 cv
226.276 200.978 227.324 201.079 228.479 201.079 cv
230.315 201.079 231.878 200.972 233.171 200.755 cv
234.462 200.54 235.469 200.356 236.194 200.194 cv
236.194 189.667 li
236.194 188.56 236.069 187.55 235.819 186.646 cv
235.572 185.739 235.147 184.97 234.546 184.335 cv
256.817 184.698 mo
256.229 183.972 255.431 183.411 254.424 183.017 cv
253.418 182.616 252.156 182.421 250.638 182.421 cv
249.144 182.421 247.715 182.528 246.357 182.741 cv
245 182.96 243.887 183.192 243.029 183.438 cv
243.029 200.706 li
248.099 200.706 li
248.099 186.915 li
248.414 186.87 248.774 186.829 249.179 186.796 cv
249.587 186.765 249.971 186.745 250.334 186.745 cv
251.507 186.745 252.308 187.085 252.739 187.765 cv
253.164 188.446 253.38 189.601 253.38 191.229 cv
253.38 200.706 li
258.449 200.706 li
258.449 190.61 li
258.449 189.39 258.323 188.276 258.073 187.278 cv
257.827 186.282 257.407 185.421 256.817 184.698 cv
251.671 161.569 mo
253.028 161.208 254.08 160.8 254.826 160.349 cv
253.364 156.091 li
253.073 156.226 252.742 156.374 252.382 156.532 cv
252.019 156.69 251.603 156.833 251.126 156.958 cv
250.649 157.083 250.108 157.19 249.495 157.278 cv
248.885 157.372 248.197 157.417 247.426 157.417 cv
246.202 157.417 245.161 157.22 244.304 156.821 cv
243.446 156.425 242.749 155.89 242.217 155.208 cv
241.684 154.528 241.3 153.72 241.062 152.778 cv
240.826 151.841 240.707 150.825 240.707 149.739 cv
240.707 148.382 240.886 147.228 241.249 146.276 cv
241.612 145.324 242.092 144.547 242.69 143.949 cv
243.291 143.351 243.981 142.913 244.759 142.642 cv
245.542 142.368 246.337 142.231 247.152 142.231 cv
248.373 142.231 249.465 142.368 250.424 142.642 cv
251.388 142.913 252.228 143.24 252.955 143.624 cv
254.483 139.334 li
254.299 139.221 254.008 139.061 253.6 138.857 cv
253.192 138.655 252.683 138.456 252.072 138.263 cv
251.46 138.072 250.751 137.902 249.936 137.753 cv
249.12 137.607 248.215 137.533 247.221 137.533 cv
245.503 137.533 243.907 137.807 242.44 138.349 cv
240.967 138.894 239.701 139.691 238.639 140.749 cv
237.576 141.803 236.736 143.095 236.129 144.625 cv
235.516 146.151 235.212 147.89 235.212 149.841 cv
235.212 153.763 236.213 156.788 238.213 158.919 cv
240.22 161.048 243.131 162.114 246.952 162.114 cv
248.741 162.114 250.313 161.933 251.671 161.569 cv
263.099 156.005 mo
263.099 155.601 263.19 155.261 263.373 154.989 cv
263.554 154.72 263.804 154.505 264.123 154.345 cv
264.438 154.187 264.808 154.079 265.229 154.022 cv
265.649 153.966 266.099 153.938 266.575 153.938 cv
266.914 153.938 267.289 153.964 267.7 154.007 cv
268.108 154.052 268.414 154.097 268.62 154.142 cv
268.62 157.97 li
268.347 158.015 267.983 158.05 267.528 158.071 cv
267.075 158.095 266.599 158.106 266.099 158.106 cv
265.164 158.106 264.432 157.952 263.902 157.647 cv
263.366 157.345 263.099 156.794 263.099 156.005 cv
270.451 161.685 mo
271.743 161.47 272.752 161.282 273.476 161.122 cv
273.476 150.597 li
273.476 149.489 273.354 148.479 273.106 147.571 cv
272.856 146.667 272.428 145.898 271.832 145.265 cv
271.23 144.631 270.433 144.143 269.433 143.803 cv
268.438 143.467 267.194 143.294 265.7 143.294 cv
265.11 143.294 264.527 143.324 263.95 143.38 cv
263.373 143.437 262.824 143.505 262.301 143.583 cv
261.782 143.663 261.301 143.756 260.86 143.856 cv
260.416 143.958 260.05 144.053 259.753 144.143 cv
260.401 148.229 li
261.012 148.003 261.735 147.827 262.574 147.702 cv
263.411 147.577 264.26 147.515 265.123 147.515 cv
266.411 147.515 267.319 147.774 267.837 148.296 cv
268.361 148.819 268.62 149.511 268.62 150.37 cv
268.62 150.847 li
268.302 150.757 267.891 150.683 267.379 150.626 cv
266.867 150.569 266.286 150.54 265.629 150.54 cv
264.652 150.54 263.712 150.638 262.807 150.829 cv
261.901 151.022 261.099 151.331 260.393 151.763 cv
259.693 152.192 259.131 152.769 258.711 153.493 cv
258.291 154.216 258.083 155.097 258.083 156.14 cv
258.083 157.226 258.265 158.14 258.628 158.886 cv
258.987 159.634 259.509 160.237 260.188 160.702 cv
260.869 161.163 261.679 161.497 262.619 161.702 cv
263.56 161.907 264.607 162.009 265.763 162.009 cv
267.6 162.009 269.159 161.899 270.451 161.685 cv
60.8926 192.298 mo
60.4727 191.833 59.8994 191.405 59.1738 191.011 cv
58.4487 190.616 57.5288 190.214 56.4165 189.81 cv
55.8735 189.606 55.4258 189.423 55.0747 189.253 cv
54.7217 189.083 54.4434 188.925 54.2378 188.778 cv
54.0327 188.63 53.8936 188.478 53.8257 188.321 cv
53.7578 188.159 53.7236 187.981 53.7236 187.776 cv
53.7236 186.896 54.5176 186.454 56.1084 186.454 cv
56.9727 186.454 57.7485 186.534 58.4404 186.692 cv
59.1348 186.851 59.7754 187.032 60.3667 187.233 cv
61.2495 183.284 li
60.6606 183.058 59.8667 182.847 58.8696 182.655 cv
57.8716 182.462 56.8276 182.366 55.7397 182.366 cv
53.5615 182.366 51.8506 182.854 50.6025 183.829 cv
49.3574 184.802 48.7334 186.13 48.7334 187.808 cv
48.7334 188.669 48.8574 189.403 49.1074 190.017 cv
49.3574 190.63 49.7085 191.157 50.1626 191.599 cv
50.6167 192.042 51.1655 192.419 51.8125 192.735 cv
52.4595 193.05 53.1797 193.354 53.9746 193.646 cv
54.9956 194.03 55.7578 194.376 56.2607 194.683 cv
56.7627 194.985 57.0156 195.339 57.0156 195.747 cv
57.0156 196.269 56.8218 196.616 56.4355 196.802 cv
56.0498 196.979 55.3906 197.071 54.4575 197.071 cv
53.5728 197.071 52.6758 196.974 51.7656 196.784 cv
50.8564 196.591 49.9707 196.321 49.1055 195.985 cv
48.2578 200.099 li
48.6655 200.278 49.3955 200.505 50.4517 200.778 cv
51.5054 201.05 52.8257 201.187 54.4136 201.187 cv
56.8398 201.187 58.7148 200.733 60.0425 199.825 cv
61.3677 198.921 62.0308 197.585 62.0308 195.815 cv
62.0308 195.069 61.9458 194.411 61.7764 193.845 cv
61.6064 193.28 61.3115 192.763 60.8926 192.298 cv
128.508 161.638 mo
133.577 161.638 li
133.577 143.774 li
128.508 143.774 li
128.508 161.638 li
cp
15.2856 195.995 mo
14.3125 196.446 13.0337 196.673 11.4517 196.673 cv
10.9087 196.673 10.4097 196.661 9.95752 196.638 cv
9.50439 196.616 9.08643 196.581 8.70264 196.536 cv
8.70264 190.46 li
12.0273 190.46 li
13.5444 190.46 14.7085 190.692 15.5225 191.157 cv
16.3374 191.622 16.7446 192.396 16.7446 193.481 cv
16.7446 194.702 16.2578 195.542 15.2856 195.995 cv
8.70264 181.274 mo
9.1084 181.228 9.57178 181.2 10.0918 181.188 cv
10.6094 181.177 11.0947 181.171 11.5488 181.171 cv
12.9497 181.171 14.0088 181.366 14.7314 181.753 cv
15.4546 182.138 15.8154 182.812 15.8154 183.767 cv
15.8154 184.698 15.4658 185.376 14.7666 185.796 cv
14.0654 186.216 12.9014 186.427 11.2754 186.427 cv
8.70264 186.427 li
8.70264 181.274 li
cp
18.2207 187.987 mo
20.0327 186.897 20.9385 185.413 20.9385 183.53 cv
20.9385 182.284 20.6836 181.235 20.1758 180.384 cv
19.6655 179.534 18.9585 178.849 18.0527 178.327 cv
17.1484 177.808 16.0684 177.438 14.8125 177.224 cv
13.5566 177.007 12.1826 176.899 10.6875 176.899 cv
9.57959 176.899 8.37939 176.95 7.09082 177.05 cv
5.80078 177.155 4.61279 177.308 3.52637 177.509 cv
3.52637 200.347 li
4.90771 200.642 6.23779 200.825 7.5166 200.905 cv
8.79639 200.987 10.0806 201.024 11.3726 201.024 cv
14.9277 201.024 17.6055 200.403 19.4077 199.159 cv
21.2065 197.915 22.1064 196.058 22.1064 193.589 cv
22.1064 192.368 21.8325 191.271 21.2886 190.298 cv
20.7427 189.321 19.7197 188.554 18.2207 187.987 cv
37.6265 197.042 mo
37.3535 197.087 36.9907 197.12 36.5356 197.144 cv
36.0815 197.165 35.6045 197.177 35.1045 197.177 cv
34.1738 197.177 33.4404 197.024 32.9067 196.718 cv
32.3716 196.415 32.1055 195.866 32.1055 195.077 cv
32.1055 194.671 32.1968 194.333 32.3784 194.06 cv
32.5596 193.788 32.8096 193.575 33.1284 193.417 cv
33.4468 193.259 33.8154 193.151 34.2354 193.095 cv
34.6558 193.038 35.1045 193.009 35.5825 193.009 cv
35.9238 193.009 36.2988 193.032 36.7065 193.077 cv
37.1157 193.126 37.4224 193.169 37.6265 193.214 cv
37.6265 197.042 li
cp
40.8364 184.335 mo
40.2363 183.7 39.4375 183.216 38.4414 182.876 cv
37.4458 182.536 36.2007 182.366 34.7056 182.366 cv
34.1167 182.366 33.5337 182.394 32.9556 182.45 cv
32.3784 182.507 31.8296 182.575 31.3086 182.655 cv
30.7876 182.733 30.3066 182.825 29.8657 182.927 cv
29.4238 183.028 29.0566 183.124 28.7617 183.216 cv
29.4058 187.3 li
30.0186 187.073 30.7427 186.897 31.5806 186.772 cv
32.4185 186.651 33.2676 186.585 34.1284 186.585 cv
35.4185 186.585 36.3237 186.847 36.8447 187.368 cv
37.3657 187.892 37.6265 188.579 37.6265 189.442 cv
37.6265 189.919 li
37.3086 189.827 36.8955 189.753 36.3867 189.696 cv
35.8755 189.64 35.2925 189.612 34.6367 189.612 cv
33.6597 189.612 32.7207 189.708 31.8135 189.901 cv
30.9077 190.095 30.1035 190.403 29.3994 190.833 cv
28.6987 191.265 28.1377 191.839 27.7188 192.562 cv
27.2988 193.286 27.0884 194.169 27.0884 195.208 cv
27.0884 196.296 27.2695 197.212 27.6338 197.96 cv
27.9956 198.706 28.5166 199.308 29.1958 199.772 cv
29.8765 200.237 30.6855 200.569 31.6265 200.774 cv
32.5654 200.978 33.6138 201.079 34.7695 201.079 cv
36.6045 201.079 38.1675 200.972 39.4595 200.755 cv
40.7505 200.54 41.7598 200.356 42.4844 200.194 cv
42.4844 189.667 li
42.4844 188.56 42.3584 187.55 42.1104 186.646 cv
41.8604 185.739 41.4365 184.97 40.8364 184.335 cv
39.6597 161.638 mo
39.6597 151.54 li
39.6597 150.317 39.5347 149.206 39.2856 148.21 cv
39.0376 147.212 38.6177 146.353 38.0298 145.625 cv
37.4395 144.901 36.6426 144.339 35.6348 143.943 cv
34.6265 143.547 33.3638 143.348 31.8467 143.348 cv
30.3525 143.348 28.9258 143.455 27.5664 143.672 cv
26.2085 143.887 25.0986 144.118 24.2388 144.368 cv
24.2388 161.638 li
29.3076 161.638 li
29.3076 147.843 li
29.6245 147.798 29.9844 147.759 30.3916 147.728 cv
30.7974 147.69 31.1816 147.673 31.5435 147.673 cv
32.7168 147.673 33.5176 148.015 33.9468 148.694 cv
34.3755 149.372 34.5898 150.528 34.5898 152.159 cv
34.5898 161.638 li
39.6597 161.638 li
cp
159.693 141.967 mo
166.846 138.331 li
164.683 134.827 li
157.955 139.286 li
159.693 141.967 li
cp
50.3384 143.773 mo
45.2695 143.773 li
45.2695 161.637 li
50.3384 161.637 li
50.3384 143.773 li
cp
7.04736 161.423 mo
8.05371 161.831 9.31738 162.032 10.8354 162.032 cv
12.3296 162.032 13.7554 161.927 15.1147 161.712 cv
16.4736 161.497 17.5835 161.265 18.4434 161.015 cv
18.4434 143.773 li
13.3726 143.773 li
13.3726 157.538 li
13.0576 157.583 12.6958 157.624 12.2896 157.657 cv
11.8838 157.69 11.4995 157.708 11.1396 157.708 cv
9.96484 157.708 9.16357 157.347 8.7334 156.624 cv
8.30762 155.901 8.0918 154.722 8.0918 153.097 cv
8.0918 143.773 li
3.02148 143.773 li
3.02148 153.72 li
3.02148 154.94 3.14648 156.062 3.39648 157.079 cv
3.64453 158.099 4.06348 158.974 4.65137 159.712 cv
5.24072 160.446 6.03857 161.015 7.04736 161.423 cv
47.7876 141.595 mo
48.6025 141.595 49.3115 141.329 49.9126 140.797 cv
50.5146 140.266 50.8125 139.536 50.8125 138.607 cv
50.8125 137.682 50.5146 136.952 49.9126 136.42 cv
49.3115 135.887 48.6025 135.622 47.7876 135.622 cv
46.9707 135.622 46.2617 135.887 45.6606 136.42 cv
45.0586 136.952 44.7598 137.682 44.7598 138.607 cv
44.7598 139.536 45.0586 140.266 45.6606 140.797 cv
46.2617 141.329 46.9707 141.595 47.7876 141.595 cv
311.339 143.943 mo
310.333 143.547 309.071 143.348 307.553 143.348 cv
306.059 143.348 304.633 143.455 303.272 143.672 cv
301.914 143.887 300.805 144.118 299.944 144.368 cv
299.944 161.638 li
305.014 161.638 li
305.014 147.843 li
305.332 147.798 305.689 147.759 306.098 147.728 cv
306.505 147.69 306.886 147.673 307.248 147.673 cv
308.422 147.673 309.226 148.015 309.654 148.694 cv
310.083 149.372 310.298 150.528 310.298 152.159 cv
310.298 161.638 li
315.367 161.638 li
315.367 151.54 li
315.367 150.317 315.239 149.206 314.992 148.21 cv
314.745 147.212 314.325 146.353 313.735 145.625 cv
313.146 144.901 312.349 144.339 311.339 143.943 cv
133.15 136.42 mo
132.55 135.887 131.842 135.622 131.025 135.622 cv
130.208 135.622 129.5 135.887 128.9 136.42 cv
128.299 136.952 127.999 137.682 127.999 138.607 cv
127.999 139.536 128.299 140.266 128.9 140.797 cv
129.5 141.329 130.208 141.595 131.025 141.595 cv
131.842 141.595 132.55 141.329 133.15 140.797 cv
133.752 140.266 134.054 139.536 134.054 138.607 cv
134.054 137.682 133.752 136.952 133.15 136.42 cv
129.831 21.709 mo
138.891 13.4102 151.149 9.02197 165.284 9.02197 cv
168.924 9.02197 li
169.015 8.89209 169.069 8.56104 169.069 8.06396 cv
169.069 7.04883 168.849 5.36426 168.309 3.42285 cv
167.63 .981934 166.772 .0620117 166.565 .00585938 cv
162.853 0 li
147.833 .00292969 133.914 5.36719 123.314 15.104 cv
112.98 24.6001 106.043 39.082 104.383 53.6348 cv
114.235 53.6348 li
115.796 41.2813 121.417 29.4189 129.831 21.709 cv
122.358 106.627 mo
133.021 116.658 147.664 121.963 164.35 121.963 cv
164.35 121.963 166.466 121.873 166.989 121.873 cv
167.715 121.27 169.526 116.227 169.526 113.908 cv
169.526 113.473 169.489 113.143 169.409 112.955 cv
168.555 112.955 164.162 112.949 164.162 112.949 cv
150.717 112.926 138.405 108.916 129.495 100.343 cv
120.164 91.3682 114.793 78.0229 114.107 63.1089 cv
104.29 63.1089 li
104.953 81.1279 111.249 96.1719 122.358 106.627 cv
261.179 35.0869 mo
303.692 82.7178 li
303.692 82.7178 305.582 84.7769 307.261 86.1938 cv
308.481 87.2329 309.571 87.7031 310.5 87.7813 cv
312.968 87.9893 314.34 85.4331 314.34 83.394 cv
314.34 33.7588 li
305.797 32.9668 304.845 35.9829 304.845 35.9829 cv
304.845 71.438 li
304.845 71.438 273.082 34.7412 273.08 34.7412 cv
272.159 33.7891 265.825 33.2109 262.384 34.0811 cv
261.063 34.4141 260.998 34.8042 261.164 34.9741 cv
261.179 35.0869 li
cp
160.573 36 mo
160.252 35.2891 183.126 83.8721 183.785 85.3223 cv
186.924 88.668 194.473 85.9678 194.509 85.894 cv
194.509 85.894 170.467 35.2148 170.455 35.1909 cv
166.03 26.5762 165.474 26.6948 160.573 36 cv
262.693 54.2251 mo
262.693 86.1411 li
271.025 87.061 272.189 83.2529 272.189 83.2529 cv
272.189 62.7261 li
271.981 61.666 264.33 52.6699 263.244 52.6699 cv
262.765 52.6699 262.693 53.6621 262.693 54.2251 cv
243.422 85.9829 mo
243.702 85.8462 244.256 84.2661 244.256 81.2271 cv
244.256 78.186 243.702 76.6089 243.446 76.478 cv
204.927 76.478 li
204.647 76.6118 204.094 78.186 204.094 81.2271 cv
204.094 84.2539 204.642 85.8281 204.924 85.9741 cv
204.966 85.9741 243.422 85.9829 243.422 85.9829 cv
243.422 43.2578 mo
243.705 43.1211 244.256 41.543 244.256 38.5039 cv
244.256 35.4648 243.705 33.8872 243.446 33.7588 cv
204.93 33.7529 li
204.647 33.8872 204.094 35.4648 204.094 38.5039 cv
204.094 41.5313 204.642 43.106 204.927 43.252 cv
204.966 43.252 243.422 43.2578 243.422 43.2578 cv
243.422 63.6479 mo
243.705 63.5181 244.256 61.939 244.256 58.8999 cv
244.256 55.8608 243.705 54.2842 243.446 54.1519 cv
204.93 54.1489 li
204.647 54.2813 204.094 55.8579 204.094 58.8999 cv
204.094 61.9282 204.642 63.5029 204.927 63.6479 cv
243.422 63.6479 li
cp
32.7236 34.9883 mo
75.2354 82.6221 li
75.2354 82.6221 77.1274 84.7769 78.8037 86.1938 cv
80.0298 87.2329 81.1138 87.7031 82.0435 87.7813 cv
84.5117 87.9893 85.8828 85.4331 85.8828 83.394 cv
85.8828 44.2969 li
77.5967 43.561 76.3867 46.9038 76.3867 46.9038 cv
76.3867 71.438 li
44.6245 34.7412 li
43.7036 33.7891 37.3677 33.2109 33.9277 34.0811 cv
32.6055 34.4141 32.5415 34.8042 32.7065 34.9741 cv
32.7236 34.9883 li
cp
169.066 76.7339 mo
144.779 76.7339 li
144.896 76.522 157.503 56.54 158.777 54.2842 cv
159.205 53.5239 155.268 46.0181 154.298 45.4551 cv
153.976 45.2671 153.932 45.3452 153.892 45.4131 cv
134.694 76.478 li
133.31 78.6431 li
133.31 78.6431 130.598 82.5679 132.77 84.7422 cv
133.716 85.686 134.97 85.9922 137.575 85.9922 cv
173.164 85.9922 li
172.22 78.2729 169.066 76.7339 169.066 76.7339 cv
81.1636 31.7939 mo
85.3574 31.7939 87.2275 30.0562 87.2275 26.5908 cv
87.2275 23.123 85.3574 21.3848 81.1636 21.3848 cv
76.9717 21.3848 75.1016 23.123 75.1016 26.5908 cv
75.1016 30.0562 76.9717 31.7939 81.1636 31.7939 cv
34.3604 52.311 mo
34.1675 52.311 33.9756 52.7568 33.9756 53.6938 cv
33.9756 77.9282 li
33.7236 78.0771 li
28.8086 80.9668 23.0815 80.4102 22.7344 80.375 cv
19.1406 80.3662 15.6147 79.1372 13.0537 76.9868 cv
10.8447 75.0879 9.54883 71.855 9.49756 68.1069 cv
9.49854 34.5962 li
9.39063 34.2979 7.84277 33.7139 4.75049 33.7139 cv
1.65967 33.7139 .110352 34.2979 .000488281 34.583 cv
.000488281 68.1099 li
-.0444336 74.1563 2.50244 79.728 6.99268 83.396 cv
10.7007 86.4619 15.5288 88.2642 20.9624 88.6001 cv
22.7686 88.668 li
35.3574 88.668 42.3145 84.269 43.4966 83.4561 cv
43.4966 62.2231 li
42.4297 60.5669 35.5356 52.311 34.3604 52.311 cv
false sop
/0 
<<
/Name (PANTONE 200 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .65 .2 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (katia lugan) ()%%Title: (logo UNICAEN.eps)%%CreationDate: 10/02/12 14:17%%Canvassize: 16383%AI9_DataStream%Gb!R&BgNb3dO=rMTKNR>bUdKM^^NOP^l/JM_-gc(A<7B9BK4hGJ)&q*.sE"X@kT#]ZRW"TPD4PBhfJN(;H=9iOYLK<AYH?am^Hqj%f$eg>T<!7^Eq>`sk"Wn=)k*?K'_WL/okq97;6_)C.i'uMC7:/c<#*l8-<eeN9blCLZlf1KoiCO_dseBB]B+4Bh<D*)$Ddjr^=$]G%/+(Vt[?js[U4S*!G/)jO1i"K;f8"Zb26U4B(@1_En?Q8HWitRL4"EL.4Z<2FqH:0$=K`aX_W*74Yj^iR7D7:TE4`/r)3f0VgM=QE%8Fgh7V3A*\-bFXu;=`goW)l0s3L&g1k*<TJ=,N:M+'M?dH$V._s52W!H2[.1rpL>Inme9;UXO[=X`e$^fI]d#;-_l$4,-p\*#DH8%RRPK0F]S<RrUm9qmF;O##,'YnCT^[ETgIrjY7Co8]$%*j'M['+i1$S[F\C6c`Muop$rbL,W`-9H=(@6f'rq;aW;g?bIp@D<[!M--%1IM"Aj,kopWRJImr!W"t)@"EV51u.kI^@nACc-MIe"m/52*Gj/l:mocYC36MI:>!F8/7bu_UiPcWSR_<CH).(7_?'sGJjbP%nG0b%lQ(J*e$jYhC\ru3?8cpXn)t+P%P\K-bWG<dB$hG"'Pad0X=?D:hq/V9,6e.*/"FG=STYoINRfT=P+`JlW&*_mlSN??EG;l]J!s-[%OoBF@Igg3[6*F@.nTb,JQ]M*:'W$&%_1qa]$nTc*2?86,joC+r*Iqq;%Nt.<HW;Io<PuuJfDh8rrk!qr&%&.r3dt6JI_%.\QHQ"%%fC?&Ij&97(Vn10F<[uaj[B_?bAQefOZETX+@4f[&<(*@]Mfi8@laZEp>IuN=Ea>c#hs_:pQ-3:1>fN)k1-R.RYth-I:Fd1'_UatZ%5-Ipf)[8$LQbgR/A5BJ,G`E/`T3)KaKV)?Sk9OZ^T&GXt'C4S8n.Xt:0YuK&SF@2AiJd7>HX_5/4l_Lj'Bb@)YnZAS@kql+nZ`kT%$U:mkV1N8fI1UFR@tmF,-2_:*fut?+%!Dgo)]^(<CF!Z!Iom*ALS*34><t/_p5H*jrl&&#5I&'6/$(>J%mTS#cAo"kIPT!L"@'.,%c4<.m.P`J^G\,pqLk5gBE^;p!bntg:lWB)(:#L`MS3`3t1Uu)IXCneEXG6M*F`;MU13%KiRa%9a`VJI?eme92o4'agD=J;*i9YIf%6.pj6)!9HVN4K0%$X+.lL6+2`@C.0P6EDWR4+iQ%SW1h^L6.<.&T_Hd@kBDrl^bFrce1Me3TEe&c"tWBDHIDaqT%gOkB>E'<tO0P%F-aV*:]$*^"l9(JLTPtC&tJBnZG<c\%LA34,e!EO+^c&SMK)e6XJMpHoFLsWWMoB;R`:roJ(['9AGFLNbPpT1VTDI.^[.S0Zetah%p<Ra2DoWH"48`Hb`1HaRftZokp=oVjroFJK406C#bPpnsZJYXgp.t5X0mSdpLS&Bgfl-D=rIt&]7bKIG48O,s;R4KW>B11rF`uu`%8nH%$YhUg50)X&Sjn..kIAT=?'l[K"FoH485HKL\"*I5cdU>:i%,p*FMQ>ce,mA&OZJOY+>_&iMQ:p<PN2?V<.VgUYJX-QH$rU!!%OXjDg#.c5YUUj963CHdlet]OgH5,`P?AE-p1[(LW2M[10b8#7RUtLpd:+:li/1@bQ3&^b;egga2JlM(D>TcGE*$qMgA(!?<4dBN,%]"gXD7o^+@=<mUDQe<@_*Pr&2Bu\X=`tj\7;T6eD9@0-!QZ[ieqSdc;qn&WUfR"KI8?#i+D6O4K-\Os/3M'Y:>TLjc-1'P\\Upi;%fruAeREZLoM>bbNHDIGV<R?6.D+S=!_[Hj<]N9m]b%L++g"83JEh)140PK+MGWdOB/(5pDMsKbq\-sIt&T#r0_nVj^O-V83r=F";%UJsOA@SKjjr]!q@q?K'Bj=8$Wj7`\WWseb;eAi_FFgo'[,A%JsMp7m1%)4YcWLP`POk(@[Jfhm[q(,BI<d;qYj&cAO2M;Zo,;;3G%djW?C`rA"GJ)3R`Rbu!JTp5<oo%:C$M,A^5>DO5%GFe9=0:<ZR15b7qc<$NJi@s%9]8Xas'J2=sNY%8^JnDmK$Bp^-ObuXb>RF$s%fF:F]i_[g6cfj8P0MpbGFHS:nHq![_XYn:g+aa\[0QWTNMSM>o\:HMbR9HnibiCbAoRac4<H^O9l!_s^/^Ls;nXujTVIA@G5>ke1%a1/ngN*R%dMXrR>A;G@E-(]5>o.#r9@%%?EnoY2c!a,]44N/2%"ER4I%l:l+0gM.=OCAE)%/_T;/dYDVe_t(+_Z:c>riH&:0X`?A%7*hICG,#!4'T)/#A/W5oZ:iVcCdfQo''UHl&#(quW@(\*<&4,daXJXf&U7`iKs.F"j"=)9&a%d#UD<7$ZE,eVRK]q`qUE[OaBpYD%<t+ecYR7n9%7i>$)2L/2b3_$5LLko7Ea@<cW!rtd0&ZGP1Rsr?`%UG/h!T3b=QVMlW/ZlH8L@:lr<BtbQ1^NZ1]q>O8.s;a)OtkN%[!^rc$IaS.O1tT\#niJe_VXgZ]5On#\iGp1-)t%W6kd/"aW@.H8?PBScN%j8Oq-X<ZG3VQ&md_,)7!$>[[)HC`2l+^0.S/P['358%qMKO6UIeX-8(*H9:nk6ZI!tEU9&qhU6mZ9D$/))J^>cg;Y&&r`*"EusaYeb=:t?q_93Ts!Nrb*;#I*@con8Uk@6j#&a>E!4I2'%m%O9R!LiR62]]Nj,Jj1[f*`1'($$O[DE(F=Rh5?l4Y^h>(D&ga@_IR;gsT0=*g;MhVl4aDSKae)X;dRo*,E,8!:P1A`AR$<"&F3rAR%[.]0E#dcFE_?M9eON>92%'32qjpreWbH>[COsa9s)rC>_KS<WR4fc0R8KjMI9r<WS"EpR>$4Z%];dhc_.im5*BR(7<aN>1eS?5SU%-5'9/dCJ\o/Lq4orqQMTen@HK'<U.a3XgDmK+b`]F.:O15Y%(f]nB:GE3SZmr^r9],\edeW`j(3H%3q"QV*VL$V2PO;KfPrr^H(e%96=P3,5(_s(kZ%+)DAZe[KCn-$*OH@;lKnIBC^sQ^5oF:T,,0.ONjRn/&#M3qiVoMcJFk,J:6,*Ic!]Z#dIZuI<qam=BU_dm#l0.%&?W4YJm/Q"%4mi3BKP!*oi;H/.(d\VYq7"'$/%f3rQ)8QqGE'+UpV""<2+u%Lkp_2oOS_piKP5*F\i$.ShNHHPEmnB`b6QS:WN#g%WZCfX5a`dCI&'P4a9S6Ci(@6gWhH`'@HD[#Iirh`PP?Gh5qaK-UOM1FQFXs\iYmU`N\@13(6p<T8?a1EKsB<133=omo]50f>>\b9%0PVh*#tK-k?S#WM9(6i2"mb66]onO'7\r,34Se-(>s[Yt.qMMEI)*-B3S[N4pc[Oo2BV!iTQA(`RK\"IZ2ifP>L2i@=bkBL_SIBn%fgm)u4FTdN_rV1fGH$pdLD;0/4^1kKP*.#:.+EEF:6BX.npsq\`+9ZZ/!5fBlUpl88PIgoQYh/blB\WgAN;17#du"L"+D\ON_*cR%1BgMJ]LJ3ic=Af\MU6q\1Q,EjGd1>Z'_`F*)uInP#3+If@kQs($DVkY.ta,(-jPM;jdrYmE,<p_^b`e.P*s5+kKPlikP_]X=\P%D%+;VR?]:q3I7rHG0)rMRiC0+N%8m3=R%I.VoVmgOPRj;dJ0=4BgZDggufPID;X;Oub%^+09Hp0%?5!be\k9WERAT!u(?TQ)Yn5Xid%^J)?NpE[G^!-p].<bR4]d^,@Z?UabYN*=.<+[8jDLIisb$,/%N17,1!8O_Tj]&!j_mI'Yd-qW"Fd_&^>;lj3FO2uTd"OE8JOctqK%cit4[J%goBGVm9<8G=h$iM=]mS#qP8F(O%fBji%1o<K^;CQ/"uDdWmc')e&?5JBNRgUGBa\ZcWBLB^hLi7"Ni]ICA5Z_rK+.1'2<%.jNt_/H`'AlCN]5&bJlH=M`l-B=_PiNgPm31gLldZl+YI\dMZc.$47QhR\Un33A/"pE8/1XOM2p:(>ts`]>Lk(hPp\Nis"/"-O0%%XcHRGLI:%lQaH1pV8;mW4M1gKbDX!r>]Uh#oC6Cl0CsTS0jOU(8[RM\6-QAAE<B'-]/Fi/,&:X@7O)&WaJ!1e1\XpBbflcjd_NF%%D2GBKAaB@JMn^Rs?Nhj=FD8;(j;QSb/^$iIl;CE,n#HC.V%Xf[/BKDKK3REL*u;bu]r.qbS&I3Op"dHP"KaQ9&X$!Z-+Pnl>9Fap%;OHj)hu"lOIG`E]-635MYarO:F@96]RO]T#K&;t16TWgf>`n'!e$[P:-(H]N&TR/WlO.:(8JYo0`\WN^a\p4QG.>\d(Wod;7n1E(%krerVnF]\5V8Uu9YUneT_I?u:ZbSW.G)Sa:EZjAOJ8poGCY26.U8=MT(<P^IT4aSed8&Zt1Mp<=V$II(Fi0u&mbu8bDO2WSVfrT<%:Lm6X`(,PH#,;qe(23K+hQu*+O]orogS_H".$dE08S9g$K<?KS2^5C1(fNOYO4c$05GH<aQ:iQ/BPt,%gu*L:0c_n_^gnbYQr^`0%jF/QL@XWMslg<@sIS4%jE@Hka-LUB)4Y_;j+;H&PK@'eI(0A\,cdL]VK<bi>62)rZ?b;Rdr=/660L%p<6)L]=b&h'1nQ&u/:Z03U%lT3HtM+=?%^I!eaD&fteYlsGLME=@l[d<6Sd8GqI=4?+d.R-9F@RNQ[EVnS^ANRB!o[:Nm#^LJ+.6c"Y1H#asl64F.Ini(15$p"4%.LE)ns%9m39Y1Q?AN2&_=HP2DZ7BZeCsqY&LRP=VK3[!&_KNcKQX(-%OrX4+Hec?c6QR,HUTg_Nf&491`.^B,PY43B78X0P@I@8i%hB6/sMWG&A_-_,6S693=ZqrA0/LW/gc69?L7DX2b:IYX?BEMrX9:1e#nZ]k%KcDo3o"kqP:gs62bWbU.]#:Enhn=kMIh&C!-rm,E%J,MN5;tBlU`"i<lpYJd=\=R!klcug)P=f.6gCn#$>=`;N"r!FjhJq9>p8M=@?Tej'iB&H=W%5@MB_HulQWCi]0Y^$Ll\1>^YHDM@%bIYL<^n.EB\A(<jO\&[6m<ZMbSL[5IA_kf]W$rF`j15-K[<J#Yom&sh>@t(DR\?X,J!\,10T%+TATe,qW3H3t?;!0ueR2D_m25?+%7d5b&XU3ulTs3:Oi?;M#Xk\BEo@7,dI.s_kDRQ1i1[dCg\Z#9!DsU:UrOtL16g[>N:C$&Xk_XA1f'L;L]hZ3>G0p*AcHVVhm>$#e%XP/$HD`@!a>'E.pGMK@oS+V1-T=oQK<R:-hBr^jUWRgQW^/iS[DKfFQh)mQKl:6iKlE"j-g3B)_*9cAo%kr4ugRWff3WHMCD@V]I%C?!qGHG7u*rO^t+;0Y`KM!b2R`]Bk!Xj\''AC_@Yq:BennJc5.3kbRMiLk@KU"CL<:9W(42;\4QO$N]&#:ilFbm)PggN2C0_g%5k%Fa6[3b7MQlRahnL,!CVQoMb\45hLS$5.$f=mOOI#q!LLjL0/_;eh@$jp?JjGh<i^STm^Su.;63`=2!:9Hc#mZG<gYYQN("Q]VU\Z%[=``J:\iIp5P<&<oPk%ag7:^BMRaYpRod,`2gU;t5f3<PB[qX:W@hY>/PZ-8XkcDX-"E\D>bT:V)0i/aD,iZC.NcUG=WJc%*u;!P%GH:R4X'_?],p;\&eF82Imm04^,'\An=Z-fH^h$:qZ)78>Zeis/*4FT$B[Mn=C2WGTkTF70^]41T[GUj9T3jUX!g]-m.i42s2]rT:%:!'$i'V=+N!oM:E,15L+-aIQQr:St:j"l)Y"%E72)u8Olm11LMK@9)W*2^VYf5`BpJc&\(^B,YaJ"m&@5Q<`o#]"s&+(qR/5H?^.%+DV:>Z\MdrEYcO@bm!^Hc5q$uR:">%T=Jo!(pl<Xp-968%mpIi+:Z5E%TC4E(9#V/'W<MJ&X,N5c2Y\>TqbFm9]mCEO[d@WT)08m%)s@<P2',Ue<',T9hq,n=-gb)#o&3c$m[p]-(-Gn-*SG-hoQt_bBpPu<WRIjGJ()@>qNkq[4u\q<:;+X3B_dnq^l8"%5C.gS@)f*c%+'[Ru^T*jm)K==4oF=2H;"_#,ZS1TQGrMTA83("96dcGAqB(Tc<kDAXJ='sGnYKR8Jf.F,ks%85LBckkWYsq'_u[$X#u)UlIWFf^%/cV3*:_PRGC&X+W6aNA<n5EE]5Kr>PP\L'a@eKam;Jc$0b`frEfh)"s7u+/$.N1LLo74fcP2j<J0*%=<,#J:=^nolEs7e7u`rBI*%kVaB@s3kPapC`CLo6Re^5M*ZVXR>!GC#R7mc(V&[k+A&TofkVZ74kMLG[W&-H*0)tT!LsOYNC=X?Fjkd(#@Hhk4Od)XnS>s>.ijE%G#f_[[bL2&krc>"@.>5eJ+qS72R:PCYg%ZKqBrgtdI)3"lh"eZs1&%5/bP_?iO.OCf"`7D(CkX_3'Pi:r#lGj8X6:Fm5Y@o`G9/X%YO0*jXVOB_]WOj3Wg`ZK*40XJkAPOCGOfC;HFMbSq_"4HR_$UR<'"tQkl&l2G&$hCHqd@Bc$+gCRTf<^;\qDcXo%&8_pf+>M6EpN%<HU_B!XWY6p3U`V?N.UkmF=:XIo3F/n%YVF-kW[LY>]:\hl<oDO+.8=NEX'NpfCKMUtMTqol-c6M*n<fehZ+_(ot>29W_']2(*?!%0YQLmpGlf*1#9UOg5dn(5g9rM2[<k8<@'Ear)M'mXoG_ohlSb^eV?W#dJM\aQVVL\QB%uIVge<<Sj.#*M9[D,h#(CL%1')jGjRGj%5,_mUmkoBmG$k%8H7$pA[8mZdh0j)56A&:-%5(OqZ-'J`7Zjkd07bG6Ghc7ZaHub:[YNCZ:pLM4AIomWL9+:N?7iueri-K"o/RCc%<q:!f^$^Kc7gm(ff4PtUpI[$Taj3mAriRiFM)i*&GW5g2e^Digio#.O%BHr:Wcg&.$-fG=&UK_<_Fs-ddVh$4K<'<r$]>$]#H:)4%s7XCMS"Pu=?hM\`#$8FY%3D!u2qfitf)H%mn-"B>ZiE.(2Hod$\(>?/#T]n?<:0e?ntl*"9V?!QQ?`3Yg'Pnd<1DFhUF0)nbT>N0%>.lgbRe`54Ft`>eK&ra'=8fYdlnr0s,u,lE#l5V/7!4BADRb;6=+$cNV9sU'G'c[QUDAEiRN+qrBNo3$6!8:mVY(`e]"1d-*r=]2%4U.lHY4G-Wnb)@;CipiS/KbUs6'K)bMUc>-Z.[N[Wbl^t0)o3ojkosc>,O*I5%@rdVTjXI4/apoWe).7_j0V"RXi[2TE\t%D!.B9%Oj^EOlo/d1#]u;r&m'Q">1&(.Is%^_f6D-a$Qsb/RMkuD%MCX7D4d0f1oN2`N##S6_b?mj*t5PjVpu8JP`1j/B;:UUnjF#?blS%r%OL`]f4t)5G&jcsuLb.R'6P4SjZIQ6R+&/Jp\RR>2>.n\%af=#AWshG_l;4EVL-^e3'SsjgLD"TQLm'C'W#93)b#O>648&>33Y9tP%$4Fklb1SdC$V`N^^h<g"X/Mmh<!u<MA?D\]q`!N85IUH@dZpQ'VP-'OKrl+bb=lat)c8&'971AT7E_u7"Jcg<r`O>tO\P16i$=uB%;fiYlk>'`j:0'ZRB=<`j+9C5)Pc@?U&ddMF'5+<'<bpLh4D;FhnXrAn%I@o>G19'R>,PR=mQn<$5P`@OU@<Jl\WM3>[r<js-H.>:%lM^=Vf]`f*mSWX:Z@21r63:"AT>E`\EN%b>F078m]%q_9GN/Mth<G_jc.@+jTf9(%m6>\+`897tlUqgD-O!,:lTBb0S5Q2AkD\CD%IdGRAh8dQ:&ia!kf4b#S(aY?M=]a-c^%e,&hI"B7Fs#V1M4t,'[6%/n]Ylj\,q6Pmm=uCY#;K4P?J!6,[n`';BO'bcoGC_`'iU&#%l:fnILp&(BM)^5*<A2jgWk+<Z+P^0H8O4A?nfbP=Xo>rdDt`2`mp!9RXT):=-?R]g4u?)n,moA">HL+$rsX&!IBJ/OW$dBYW!'E!%7jjN6l82KLhGf^.dk/#n:K9U\k!`ZEE!Ki)dEB?OEj@eS%!30X)l6fGOWYpJLW;<Ng"Z*[h,KR^kb5FK*Ci_gf+b)jMT7M/UPGO8%1=[[MX0u1U'KW_Xn).(-K8\3+\R"TR!j%p[SX2/pAi_4#gV4[o?:Hpo:^=(`HGeW]TG*oQ20$,aZKl\?=XUV)P)->[Y:4^ObT3Bn%U3jl5]UHSF$!#kt\/NWQ23U=NX/5L2QGomAc%7&L)L/FfYl*sc0Sj)@-hLSo87OM=^;*>RCofDHN_G_MmGG[jocuejj:,*.^a*Z[%>.r[8C/kMJ>f%4i*?Y'"A5\If;52LWHI_FNU\@qdi.%iNl=;We:^mc4#opl/9+bobEUefrooU2ORN8<ogRSO0lmVp"`SVfbT%ffc%Z!(!+(2LUk_)IPSMQmTj`b+lqh1jk\&o8>h[fSI+N;b3RN>T]C`e:@r7(l(9%t/5U@4eJdN/Lm?6-CDico5?g7dG7[V&F5MJ:X5r%/8Rqg.J-I(FH]h^1Mq\i;WU3;E_iu`e*;)XAkZBF=Y)se@T8o$IgJH4Ts=oGL:S#I)/@>k7g\bE*;eRg:A]#MIjT+dF(!ic^Y>k9%jsGH>'dZ=.R4Q/KWqV*WbaQ#a$A'F.&sXaR2R&AS20[A!^r^FjIMsLrdCsFA]@Yr<j@rB:]5kad@&h%%beEp+V;I,q0-)>3_(%iq%&RFKbhSW"D<f<3lBLc$K.?_FJL39CuQNA<"?4TX/n6)=q$j'e(1n2Up\hB%%&G</lZr+e+ndm$IK0+rV.f.qL^jInoL'#C!fK/AA%W\r9[6pg8<5_t)FKL_"Wd9VR0b.,]#k1dQ3nhtF;'.VX-_Qf?A+X:\PL]^[4*=:D,,ig5$..98s?$<5UKd@i'[mTSEImBaYp:&NB%N>>;BD"JpK:Ar0W>6]XQ4opE1W7_/n@^fu3Q$[LUjIk2mPGW/?nB;/GWa's^-V#*J,b6>E,2mp6X:bVX^F!^65h5H?Kc$c$/SUN]%>A7F>[o&]e33,K,qmFmt4U01)/L:DU,G!U2D"9Gp<s'lTS$3Q'j`[]U8<++9#!;K1X<Le2BC0:UBidYYq:_g^^"$o_I:)Vs!C<5q%,_Hb5I0I854WpUEQLhN;HAc!9FZO8:S*d]U^Di6[NB/)Bl/^qPWjho4:-?45Vc(`G@K`l=s&]13#,#RHJMH[q4\W!VX5+!\3]QtC%_"n">WU$t3mfp!VHuHElEW<4g[@_Bg3?7Oeg?Jn#B_R.-;R7:?VLR\H^sX6N5<u_ADGC67!S?[/(Q:l/?3,):(i$+JI'4%PQ%/8K%*jg+3]ir:h*^Hh&,>p<;[Y=P!X]DjW`Q>kp@A[&gf3;AXTN-^6C4-5=RNXf4(tt9hj0@'X9=B^Hji_P4kk1tj6r!+KS?;PC-](.2%eFPo(EtDGE*JZ?iT`6.^AIp``)Sp:D'o8t!;ai=a:fGGkDBaGtnX4N'&t:ZqDR%,\#Hdb[?GbnJ&kf92p<DL47Osnc]gb*NJ$`>?%Ol%K'0Z%<2ZK,^eor(`NcrpIPpoXOG=".aK##Z@AT\_P]h>"4/]GNnF;.h:%iF)lf<B?20%[Uh,o;[qB9qq2IrrK3d$MZUD8H%ed%1X4]G2Je"l#5Vf\VkT*!OqO=D;,IQUk^k'u@Yd,;ESm-4Aj2rV<<*1t.jeuH(f\W22Q8]T6C5f;6X!YKI`&\<E-=3UK38c'EP'bM%I."@Kl]FNLLtn8[)uC%9\)!>kg1%N6HB3/e@)%JU9,u\M]C:t1qk[Zm=]s4J,&kq=00J.U*Sfke_p"A+?lZt]nhtMkPG]92]YhuM%e2ZG-H`HO3HL/!\W]bM?Y4'C?Z'Q,e^@7ZgFAak^P5Ti%Z1&)3(T?,=[)"4fN-iN%4&606`AZLHMrDX`oKB@uc+<73VisL`-S14H%LF(JSIL^*HCmR<:8N[r27K%G0"CKu9o4+ur^bCIeQD8`K-0X3O0$4D(Nk#8jf'l*^KuFMmQbBnSort0l/06GsDEdf:r2(@(^9$VV%K.l(?HEa8bIdM"@r-%g@p-5(N=*K*D2]LUPD/oO0HCgSWpXc=/=(]d"KrN%NQVUQO-f<aZV<8%FqXqH[[Fej"Qs)PbhO.PJN\tBZ%rFV(E2lFgi?];/=4U0hf?B!.X?Q8jMUH@%Nlh1.Qj^4:]rCp@.r_mD.^0])"3h;9'LXOW*alfcn\%CVcJ,33I[(dP]]:HS&b0Kb(%c.C*aC&Ln7.+p19ME^WCZ+R_g%c\R4ERSJ4.dBOl$t*nEdS[L&=mLNj6'`"F(#sm?_hY>Z<-hX"ch>OPV=mc_O\bpn4$Stt-g9=L%05g,NIAD_K]'R'D=1Z\KiOlAmJY.9`BRR3#*;$E*j7r%8oUpR):NQ3eB/+GRT/.ib\O't3Io*1c\6"J-o[D;pVlLRod=\$iGK."u%]&4*f/,7#*B:"XF@g4f_kGkjI]?u6L2qLYj=ZDE]FLkAVEePD.I/YC+Y"IgA\"/mPXUg,lMc)!AcsOrPL[UT/TJ.0rfY-CKfn5(>%FX2S-r_tI5kh5<=#eg(<Y?@VdJJK>NK55c8Pl*oGI"K8]&$B[;elY-h0>aAOH[q?0I]C<rC,SkcHiB[%-*q$\SY$u3=##>.*j+"p%V+2$L/cF&V#2KNC[;U!;d<#7C4kH745B`b*mIYn-L&&:(gE0:F.M[/O_]KR^$*NR;`DpP&H;NYaLJmrQIi^W!kt60%n?R(W&N+7)%T^49':L`I$I@.-$D4S\jFD@Z$I63q75o0aPqk^U&Bl?]d_k?^-Xq72jOhH1\#JF93$OpiV*5,U^6$Md(.Y4":hboJPGKm'PF+s&S%rd37Gq=)@t@Dd^=06A,;K5SBXQV0&chTdVfX7\(SMDQ)8nDWro@BI8nM]DBKIWI)ad$)*?ceD<LU?"7NbKAB%[1eDTl(\dfMl2?!%'05:,OkPg9oQ"k]Y=XB/$5%>B<3G*MXdDC5kHB>`qc/Lno\8NG6I_YNPB#7Pqblle%"dpVji?W;q<1+?:7qMjmsJ;p*:ub)pk8o@%rA$@af<`GWf5ZFDPl!-&T:uQRh4!ffQFc2)TJ-]^]DH6oMF"JQ5P=D33F[VAVgEbVVV1>.^YKefki)TkS:4S0s4Mn8#Hk.V>jm@/%qJ5&;L(F.?/qc(+8*0NaUd;EANOf#GTZ'\#l15-"FP.`M7c=F.W&Sqo_5b;D>MT<WGh7,lTUU#79-Nq&Pq&]<CsX9;e^"9gc<i3,%mB;"o;./%A5uDm+0&&l<s1k:mIX'47@rn4P])&6?SE^%7G2_I/)H>V,4?B3&E>1=_&%>j9iV!Zb<<a"^idRE3mX7*G6+$aXgaPCn%/f+olVs(&5%`m_#bG2\qOjEpTWDC[Qh-r&"l0O..m@J`^H3u0!=dggVcg9T=-jd6[d'E#\N/GpdaC]buq+[fnW2HbXIJRI2$pF8a%J%sTVe;`p?FR+R?;d60WG/(sXmB%BMI/_KPIX7sja;'^N(X7EQF6ig9CSO*5oCVPHfrBJ.*;S)Eq5t'!W\$YIlq!Q7eoH'*WV,ee%HFpd$oCUMe<Vb+QXjBuW@n58]he"p/m?lK%9D<#`lWs/3j&5!bqRf!6rUf.j2"I:,rU+.=oBSWEH?Vf9H2@Bo?@Jk8d8+\0S6>%*%A_&a@@m:`H4mF))IK+aBjC-!UlF"&a]jt4(0NPqPWV!&`ld;ha.mKV<ru=^&4tV0Z;S/Be3n]I<g?G]rJ&rGtXY4a:pq/T]>h_G%%rNcBZ:BuPLVf_smSbb(Q'D]$8CNXNgn7h/(4WV<T4C=^ff_W$Qoil@Ic$t'24ME`e;B,''bTE!Sb5STNZKI\0;6H>R=\LCeY,P>m%46PLuQEG[g?[6#U3]2+ChoBYJk^SnrQ4NH#(:nt"=gO+\p'X-,Ysm^K,Hi(KX]]U5YP[DIOI,V:P;hi`Q,`[<4BQjW]AW+Y"Qa6.%>+8e^>NX5V9NtQ6)]s/9s.<YdZh#klrZ^ZVH!"SU/q213b0T2%6']U$FW*'7o`;_$QG.P2%iZAXk%DQ(HW+PSTR2$V)fJOnXUAiF%BE,l]e\;cMmPTV&rZMee>g1:QrN^Pu%9iZ(nUj%SN3_$I4Rn19+W.3G/UC7RjsGQ(l,o2&i6'u^j?(9g$Jm''%M*Q3<auA'COAo\%NL_S&,dDur4`VEqhBdYJAmGQ&HLNYrWp15L)DjR)isTkTY@X_XqOntirKs&&Vs@8!l?2st0*OpNi1)rEq<RWaLioEadbNi*]6hDn%+24#fr];7@#g@T7^NXu63'L[.+.J-%^7k<5qN](K\]di^+$i$7hNg1WeamVXFLAgP2HTboNZ,b'gFLVCSH=7fn-2u#Kt2H8#N3/K%;&?\@<3VP2](!\q`l;m^q>eY$gY4iP,um/+pb&T9l$BTB!*T,6((0\b`"6lE3+SrD%!ECF*qXjeJJ-i60$iJ=8(:fB"WEHs,p'"&%#cJ;*.ub(?9D$'ial52-Mbbg!)18]CdSW4Ll1AsJqrA@\gJe]EU?7dma>9WQlLdp%$Ms(dDdIiT:0YK0@nn]@%j?oAc4HXS>=_4a%p@[1PBYdr.6<6Ec=7O5#.qBcH+'HbTg%Xg6Pi^AZLG>4&g1kbBG(1paa5MHcVrY*;s3OK[HS,V-+jkA;e-_,*h7N6I4FfBfT]jK4%;HMoAY.FM*]B==17jE!An09m7,.Vagm^/;d&'=Mkr4&#EXol2g71]5K8o2Ohja?FEoU3,)US4P#e7&j:G9>71rK6VH*$@keH@P2*%8uAl/XQDaqXJ3\tc-ffm9r(H27`+NKm1]X8`acmdSLaB>il@^o/hb\nhVC8e`JZ+)L7$l!F5Q#boG<R%Q6](/9^&Q_]Znf+FB?8#%JJdanK@UP(?$6#-4TjRfEue+u[Gk2D=j*Yt-2,1,8o7"\`Ig>p[@CnZ"W%k;\.k_]Fp)Y]ViTA1g/rW<0<U)g,"c0iO+BuOf=&H+%T;*dEZoo46KnYj=Ya;`eik0u2"Bo/U&nPo\dBeW%f\('e7PUamMud+`m00>dUm?%T+kQJ-kmq\q7Ir\Cs"K^s/=bTi.S/uLK!+b)%a^EQ5Gg@Jk5hb51T61<I9fan;n,'GJ2Lf*<dnI@>ldtZ+PqFJ1SBblUe_OcGEeUTcV>2-'E!>sRWO"RQ++BBe<Asr;"XWQ'(^isC%TeXP3>Fa'ImH^8'T]<VEXKjq#FmR"<EINS=[uhjp,_J!YN]ldMRb,*eJ:S_X/*r$SnM.QEBj^bbh``$s;.dGNK.GX0/GQa6T(qg-%amSj'DRaODJ=XB[f;rD6R(7$TIA%4m0,^')ai+Vg_CVNS:su.)(-oaFj[_@&@s\64n<(PMRZCEFgXl2>E'?;:de#l]JMSRd<b[cq%>RkVsmIZ,P+==%,^ijtsL(GF]$j(>!F=]tn_GELW-ic@JP?@8!_1VpkbjXSrrdO532HRX5-_iej&a;A?hc@f4cNmYDEi`(6d=#%C%6WCj_2c@/:l'LI5B:Mcsk<SjF:>]TTcWp;Rme!fjGc]Z;]d-"33<leGA<HCt]bb-sP[j"AIKlu;4hC8Gbi!IQP,)1]fZ>qkd)=Z,%!tc/oAebCOBhiZ&OR-W;IM\52I$b&JR*-E)5fk+MKK]pFjUo?KYFh)+pZ5V^&/18K3hamu$o,=u8sE)CESlbWLl"P.NH3no-3b)!%Y6"".`G:'i/BQ.%U`jDDj3_B`BM'A$:$EekF+k%B1gbmc0-<[%SZp-O4RmbrBpN]<GAi7&25gb.Z(VljlB_hHb@+KXN^2d.?`*$9%gTMSS)Qdpa(A&"KasC!_@7]XB,QQ[2@?ckf)\"OD_8>!#Wf+,n&Nf]*HH<F(R6;<bFn9[4_=JU"X6Y[S^.[V"+=2XO*d`A<KC@!W%3=kJ6ArTl#B.I-[L!a"C]G3M,`g+YWP%._p0klnR/OAJiH[P)V"<GT-T^hcpWLpFUOF"GFa6Y+?4A7t,l938HO6A.)6TC;C%I=Ug%7_WPi>tQZ;e.)TJ,DQuYaFP.\2/^kjIZH/-Lq*GQ&XAOTR4C]$kFP(GLlc;:_b7AH#RU"?"=.1F-+mHQh1C^O/:Q&<kfSiG8D'=g%^84d5(ZAhL>i*5SP%Z*0roNV^/Lkp0rJWDW/gn""9)[PcDOkVnp"nd;O\[SfZ?7'fYVd`XK+;]<7b]>_D95)3"UB9^+`sY5lbS>b%B<JD@@NF_">Oo"g;*ril^^hf)TsJ0\/Fe1jR([barq&RFR=EPs)nEi<"puD3=Ni+#;Ypb>E^N+pEtSA0I0>.JM6mBjGMZ9qM<CC2%P<<kEJN=`*lBe:SQ[%j@W"$M$A)@NIo^88liHQCcH<;U'b`cQ$g(6<gi]bBI_LQ8"SW+Y2.DlMCB?&P4hhDYU7;B)Gj4O*W?FVU-%98e4VZL=Q7aV@_NaeTB0FeOmNe`gR\*,QP@Km4kjak)5oP_$.o,99:kfj@866=3g:LSt&[(pULL_"BM7*=\[)\2$'RJ^-T>7@D!?%'f$XfbJ]J[/7%J^9T(AGb1[uX>(s%.aeWLL7s(;ac]`NJJJBk&ep[?0,N[C8dtL)FAl;+?);$I8R#2JjkpBF_`Q"*O("5N/_+BPF%\JFZ&hh9>(a.Y6jF+G^QIJo>q)eD2'<edd6_l?./Q_AS@Yd7YJ,#6*ZQ?[H*c9Q=pOcfgeD\G3j0ephiQ%[&a5S86-Q.*ZD#,%-r%_?nHJBk/7endPeH-p1s$q;!TCk;2h]dds(=b`"WP>'?5#UGD%RKurE&-"kR6A.4Hb6^O</a1U$oF6JcCk`W4TLWQ5_cCbPW$]^fG%Q^g@..nh:F/ieP:PV"k8%UF)Z?*5lL*4k2>3]c(OJK28^HBe@bJK28^$p$BU2bjigEX!Pna3o%mJd7J!1X+^MXR3q^nF;o3>OOq1%'Gp!sqq+J%\@qkqQQ]^.ZMMR'=aTisj[<eU82&ocCm_QinU#XrZgfEfL;MDIQHe>ZZ\=@[@#GnS.)A'\K[,n'Sf_+>l'ZVGk>t@;%Qcqu2D<@XH'VG2g&dCu/BeX*.USC1'c"3(r2bOcf#L<#OQU!FH;%UbEEJHi/mS7A4Nh%2M9I:ZqC5Jh"GNpM4fe%F]Ek&oXcnFEK%N(($VoX7KH91hp%)sJbA:g*p0')$HZf/2"e_61Fe#,_-Mln!Aa$[gO=`ScbN-017[A3OUi=k2d&j<G.te!g`X_f0!L/$V[C6`$1@%4MImGN9S')-#,);ZH'hUZh2&liaA.L[MP2o1tmu?M\D`8+-d"!B,+nI^i"M@k/8s!I*&QEaF):9[MO;-=?^ff#Hcuadl)NAT4:,Y%0VtNgn,QGc)0g)a19I01PBI.ZLciCPo",)i%$ASsRM-?1%"TC)hUt>516gnhI)KZp%+A?UX,Mn?]+hG[.#c,`Ka^+90%!/-=>95[%G6SO<oesB)HYc(Tib:V7JW[9bCtpch?S3l]i]?Q4:2K(Q=-\30E-H5A-A)tqbMqjtKQ\$!]pO"3B\PJp+33UIe$(%0(>4'-=#pO5%EiRoN.l=al'(>G1VmrSpIQBOL[hqJC+,^Ql]aAK;8?uLoP@&Up^$R)7*NB#$4qrWmj?ZsM/B\l&bk2R95-881('C_&Y`ob6j<CBp%Hq%)b$B/MV!D%pG@11C&MoAV5/h=O\VqK>W;LloIVsl<6O9@t+>p^1TbD_>_.?omPl"i^UA.h/ULXT^()0X[W123Z81F0pcJ/!HV%a/8^D)iD`#1[\J):R<@OZ`,!@O+0dhF,#L0\&Xip2S=J[-R'5:CHt%Q*Ihf9&K1Uj8+ndHi?L)ifn/YhW!A";[2R+W*A'KoR#"F0%S0&?,G1&QaEXq$Ib!aA):.]9p#859_^J(Jr)p_tE^E$&n-ZS`U9g1:n`R/'j\AQDkF_GMe-YJ&M3D1:EqY]i<j?i_)m4d#:L",b"%d*[QWCr*Kk]&Cpi7\3F>b^*SK3Np`[EJ^+#km'U)\M!k-<AGk54/rN1J!^Zc>DKMpj:bZidH+9`ml?5P3-H>i,qM6'527RT*udBc%0)?:SV"<Qb3h`!&+"lZ.l@e`e81'DBJSFq!O`(A^4WcXu5$[k>Ph>u)Cd)+BHUk?I$0T3;GY>gTo&6BeOcT-/3$0ci(Q6tt_+;_I%)g%d$Yt?bPANgbFHGsj9D40KZjM34$d<P\3r:G:L65`QcVY63q1-"k80D6'"Sqhm:ZcB#:EHCJL08"^poGRFGM0>:(&.>+Sk.I>-%L(RX8R)5/ZL_F/_n+NC;9Ws:`7%O$liu@WbZ`A>rM32;QCq+h91I=-:a;P;2:OimmhBqeO@-T+r%C:>`eB\tJ./*d:39Ihj=?l?Q%l-XFuMEPR2SHW@TPP-mk\Z::j2<##\6SU,C9/WQ0*,6oIp"L`I;X`HiR#q`H9eI[`mX5-SWTpiNM2]sLo^Ph"0A/*YTqAUNVN`a"%l)c//cpYH@_e,]VIgrdO&kAS[,6g_aC$MpXN:;ffX)go9Cq)NmZ4P^K>!*NP<fTm2'b9W9e.Y!]8WJl>(Ul#\9naN:DOEL"DE,CO%e5Ws)4,E;ds-?WoaJcto;rQ`q@i>5$d%=H/60S9h$&MHo!trMb&O(#lh+[0hC7&re_T0de*m>0\`m0/h+s4^WH0>H>1-F@S680@l%>[5CXKp-It!OM\.@W_/h)3UIV+D%>S.68B@*d@hO$bJ8KP+76j7i,^i^MeVV45VPi(L&E'mA&L_ch72.Y<+CPY#*t]q>>*m6iHVq%cK=-*fCej@716isSO(NREom/#;U]5:VK\D%8E!l(SpV98luoZ`k@.l:%dbO!A@E(N2eR1+.Za_?Z!+lTM+`$(Nm0W&S,(Qe$p2%$%4(_=T"(&#+,;.Y$-,].FNuo(>eW(Xa0@bN/bJfn\B%Vg#h9J\g)Dmf_7TW<2K8,TGn:Jkr>_\e(T9*J??)\TL#?<7/T?^mM`V]E;%`lZN0\7E)GUh$qP.t5jY0-@q*K+?\W=#b%:=5sKJ:I+BjiDo6;+NJYL0.Xk=SRF0&&E!8"G5[-fPt^lCZ4a1Xpa'0Dq6dG1b0]2.%C:gt@X%o&RN=e':I4o:m6D9^/cJ5<=\IDcIJ6$_T\4<oiiIFk8e=Q?[>;aF2oIK`;iWEhridiSWS0q#pkM^]i'>$ggl5mLWGH-UE%PMD6s\:L!<NLUI2c4uS.pP9(#od*ogQZB6I6C5d4c7e>:[u=sB;aF$hCEPF]1E<5"]M!,6qr>!R90;Nhq,,1<ZX#h_(?li'Rr6_8%b])6W;1=$;Kpu%">uWF^o_W(:aejuR#tFF-R+ZRY\TD=l4q=iW*IH4`jD;C=>/Ii#'?[21l72H9+[]nk761%o2"E?RFA_olP-1<O%2I097?"dk]!nhZmEL,O0i?j[](DU`[^"5hedj;ZiC4b,\;7UebZ_N`*VMe@+[/(H\VMbL)r+>!ZZg"48039"54O&s^(U\^SVkM,Q%VAnkOohOHXZK^@cb=Q<p%>D'LZfq\+_KVtR3h("dN")+J(Zf)e-D!pJeH+c4:GeOnWe9*FZg"3-9*W\WO.Au]PtMqe?H:BhMb5'!%mYjg`Rk?1W0!&F"c_cUe7c:_VM.G(HaQ/dT2I097?,D#;j#_d\F#tC_!(6L=4f+M_)&'rc6?nR$Rj2.s;eBa[XG][-<u2$<U3/3=%I<CCt75d9)hJ=,R;@cFZ4Rn%4L.+!5f]i2<$F*a[d6J.mPXuR"\m92%HAVc\SaJJYOADJ`:Jh?GOsE^&T'BIh2iu,roS=^bSmO\e%<C4VYl\*?LUrD=H\f2i+/c(pJi-VW4RH27mEu-K<5%iLic?d`@67,dB7(Q(\"A_4RbV-OHF$cMrJ?a*X>;BH)QR/C$H2-]S@O$a:%(YrZE<@TA%F!l"cL,fJY)\pd[0,Hi@c$?8^>eM.Q/C.dHoh21CfCU:[0X]HAZ#b3I%PsZp!;c?5N^bDEV-I)`:7m=>4T>Nsku,k,%jt^Kb`ZO3]R[&V`YpOLIlnC?i(T-7E2f+V8*6]ckH];$IdI2gIg[Dt#[GhH..YLSb>tjZCeAW\/6X=4b%@(t<q<Tsho;,t]cB#XR%6G:=O%Qmf0Y+O*@?GK4.I`CJ7l6R^fj"c>;:NfTJl%ueS2mA&NCV<d`9:SrX\=TduZbI4d4"L&[ZLHjjIdBbOF>@+L?*U@+;dTg(%1;eOD#t>&$C\-Kue5-ppUaa7rO$,jY3L&d"E)YW3DD4Ia3O+OfX*/;'__Aa\IE?TY:jV9ag;:A^7!\8R`?XbN;a81]F2m!F2=QL_%;.gWX-ZR4cGX;h%SB*DF%PQOB$Nl4oZgXl].2gfXX;gU*r6"4bmRC['JK+#H^UJNV)t"??EOt1J&t+eBM\EZN084g0hip'^]VN&!%mY7<5jK#s!nrg:`1cb1;G:E:"/e,h)dVlY=qGqZ"Ub\(N/q.%MhL!M==Bh?1:W\=8AP]D0:-V.$$o0f9J]u.@,hChc7qK.?qjo=h%c`kfuW-:Wp58-Sh`EpJKVds-c]q>)o_T>;`Uj#/FVD3K<._e,uUYg[8U;,iW,M;L3m'r@'mp#^JAHHI/L*WYn:<;#oC9c8FVLa]1%Ci6kl0!UH6p"5&),d+f*'W00=`,slCq<k$TQ'gd'22TGe;g;,X!Cj9P"nPQF+j3D.AkcdXA/LVjb9=b77k#6QF@es>n0Z^?UiR?i%k.#;95KCL;+nD2slj`?e).=t3;:Za,L9^4gN?\XhZ)bt(j<uq1_"iu>c%X*J"inCGnY&T*02pGC\jX/%I)Ao3lT$E7e`U7MV/j<j%24d>pX-Yo=9sqc7oY,4s2n?fNpWCb4SaX1]XjXrVolGDjpfK.eY8lOVcAOWTGRD\<GW`PO\qf\DXa(kN&!neSEnYBI7<`*>cX]o\%jMNRP4eBY>iL/""KhkWa=XF@e[c2B.]$lqu9'i3Cjm2W,W'PJ.Fq:(4,o.Qo=4/sMbH<[80MALr?!ZehZ&A*?GK0=Id9963ht1/i%C0IP898uW^",mhD5HVUkGKtojn3XVM"_W.NPkk'R"_+^pgqWR7YH`_/4K:WtiWcMT%4^doF&'GSa!+X=4h9C,):[=M>[A6goEu*X%C#ffCRN)>(`fi)X#?F(#hHF_YIb%\]I<UpT7q;OWe`1E8aGMZ4"liY[c%3L!''$o7;;*Yef]46']3OP8Z]FLTkJra-oBf:l?U;jH%+c/udHHup2bCE+`C8dm]EJ[C<a!Po8l?4QK?r\lbRj!r:2B+i3Q=9$PDJ$H8)=D0<63:9ac'+o8V59a0jQBo,d8N+pS>2\Cfbrqn%Af=3+dZ!+NbXg'/8rM]N8Z@71ET//;-/kBF(5$8hChupQ(#&h[f/H@NI@8KN>hR'GceY\WQO,BKH>hS,hAWk]X$<:oUn>74f]@[`%h2NKuqmee>pGTmW7r;B>q-NA!,Ko&PUUu_7#qb9>B$D,boieT+pet@!ia\ZL,7ds>S2FNA5"_Df<XJAjodAiGB*\`T$jKdBcciZM%KIka,"d!jHs0A](O<%a\kunsN1IU.$_-ZtB(W,l:X=%?/92LYd-'C:%oK,u,-^+E:^ZWC>h4\nkdYtY#1ff,`R/\qR?B9N\5mD+0%#&3"cdMSs66$XQ?ar,NO<I?:S=R-dEZ^>%5>+QQc>STVPJ#ppr1;FXKY"e+2p%%!K0U@%":\I@pPJihP8W4OlSIMA&%pF`P^Pn<Z%Qo,+&I%kt@"L/B<Vg,73>SjARa-grJEV2iJ!Xu8>>RmEK6?Rr4^uQJqJUOd8ZN*@g''is9SqE#,TlFu"@i-.B$S\e1#s!M<3EEEK%)!=@Oa[[Bq$SWWt@&tW\?ch4DQrV4R)Z!@GTl+B[q,4rbD-?nA9DP<V$Br5h0E"AK8R0EYI,ru&i$n@t52&RJmKU<90'/"K_G1#-%^;To2-[$qGf)$u<\<JWX<C!4;N4Tq":+nE"#05Na2i2`GiOs[RalJoC]:m6Vf.T+kE+79%Vem[Ioh1;P7H@R1FK]&-.RU]ANV[Ok%n@a:m;5%)fI)p[5@TJ<Bl5024W+#/fb='H^hs6VV1.7")NHMF3L.n`Vh!<!9\`1K:SphRK?GGR#%GkGPg:_sW\,))+"%^ADI`W7\%5+t%8]mc*ePl+SR&ao<b5&hA00'FF$ZDJ__-6Gf[hcTXL,qD%1jdEotI`](q%J^4.fR*R[?/:lHcpQ^V(NjK8^X[8hqtMM"o:Gne%^Z8^7od=^^?h/r/FJ=,`Hi9*@B-T008%R;*H:(-Vl5.%&@H;e6#*6UB\,(r&8gC73n9b+sKip%(]10Kc063])1Ei-P2#b1;aTnu$%)6'CglPIY")S"=9i&t-dhWpMe5]J%'\G,hGo%GBfng*Yr9AU[1i]b(2hVo-[O)Os/LZht@L<o"<^=P#`M`C^Cm;Vgr-!TpkkC*8T%rK;*lRnQjdgA-\4@5@TR-1<dJ:D&P3Y@$k&IUh0R2oHl!V#0r,I[Q4?X5?>5j%K'A1VCD0n6Wk<Y2Tg\R.9V;)b@CCh!4'6%#oP9%T1<4M\,))IPr?:C'2)h&hWpM=k1mY&^H[j-r?d[$RXVGI[_143n+H9ua`oc@B_V?4GNLC7?GFmOiOrIo!r!q_]1PHR4=/hKQgg<I%U$hT3O^m/T(sl_:hWpMUctOW"1uc2tETqI4)TK)G4KZn?j3"Xqoc)2[*;*XQJD_?UeSgu,KCZ^)aV9l\)!"E'f.Yf2oQCkf][nes%+kG8dj5'$fI&gV-4Z:a%IS!!?ZXG2#Y?t<LB"WKhJh%_QeLrYhG)1MDP*JC,(2)cVrK<EJ\!1j4Z8eKuNf4+&R9g^mnI^)NPWn-A%X>%=@Km%/H1R=Sq&)IQ?(.3,d=?6u\hL#a9rS4Fnnfkp:>mNc2![7fjOb;KK'1A3"2Do\?hk+(YR6<1f8+)>7FO]]"Zu0SmiMlE[%A\#&A;?(fUQ:u)!qg>WrmT4&ql]/T]GrtVGHKq.^5?4_RY>!jOZrUfl^4"W_]X0;OB'[c]bIN4IEV+]u^XS:8[U+ER4<N-->kd;s%s8D4LI67@Tnbf62]\H^OmU+f=c-P5'QP\ibgmERd?dBM>I_RI`hs,=k(NZpRN]o6Vh6+4g$HgTagAL]?a/_XQnT\s3IHL2.H,%_[%l#\gbc__J,llAl9gS`<8[7=_"W@45T9',BJMR)uMIA6)!Sih3XNQpQ[s*8+_41fV*J.nR7R?ef\]8Q"#aXo-e'W&Jl]3"]SVu-,^%"*3L;4]3EmFeS`]NG`[tH_kg`=YHmAqH#qfHN[ujhp8'[ePqNdkK=aIP<2u#lX];8al-^Y>hMgJ^PXfT*t-\51X90F]5VqupNcJa%`PK.EIQY%S^#W!lVRtYqqrm&^+H+32GIhh!4On0D!(t66c>uf6Vk"qpQ"B[b<G2SGX(Y8tGjDe&2.-7%GhBB9F+q$j8$.cak10-1%BjZAh;HeBF[ME0?olOuGpZ_;#9"260ET`AFGJA"PSEtE:5Mae*RdfqI$E>ZDd%%N2S&J[Qi3^8)Z1i)F^We@u//A#l6=k'7i'?,s%\b`;\W33)/9Wd-kQZlM6\UI]4me:Kib"D>T)7BDOSrHjlet>(UgFrEcj`HWr'iP%K/@e3lMJ:;`:Vbd%hNbNYXtETQ0_Y<(r7kIf%5C[e@9CtrNq=NoQjaR4&;#1'2lY1/%BW;/R+#6)!QqL';QhOlRIS_XZj9jb=-2Grb>4WdLjTeTI^V'l0oO)t,i)r0%RAZIQHUlOb%.O/YQZ7&`1qcS==W\;O+hGt@B>N*`@4AdeTkuHQKNXYibZ+_</(94*]08id5m,Wp\(#R[6A_@_\1I*j>GZ2hQ,4"F>.VnfXTbkeN%O8GjIPBZp!rDk5"79R1#/?Tt"]]ekWlOlA2k,m1&O0PlW2Ms7Sj!\+&U9M8jcMu[';m'_CiY76;bh!:!Yp',\3aE=9H*Z6U'!1B@%L[M(Zb;EB<CZEi&.G6q#F,\0%^L'ZS9"qjd9!@WWDX$ZF[pM=mC%M;WMa5*;M.j8erH5IW^G.e$G.o&s_uR?"[e"`Y11o0Q?>BCB%s7RfH!,ZqoHI'??:F:6nZ7bR[Dde^aMj1]Fh)E0@Vmc?uF4RhoC]=1`Vm5]Z"OF9Zg)g@ZG@PXel?XQ8o&.dS]<$EXVb6crlYcqu%oQ]p,p\/0N:UK>j2Xc=_H.rHVF8U<]?TgKI.ZpG1V4=bBR.+O3nG/>08>%BnC$Hg65Ei`^'NM<m6'*W4EV8MQk?SmrY':Vpj/8nO%FcNX$U^Z\a2^kmHR,"Z9?Pq9OqH33V%RB;U_Dg1+hncn6l7`FAT@oj(!<7JXH5d`p!L\%rj4*:Bi$3AYp3?gQaLj'/g`FJ+%i7Bj%IfN"E!9$D8,i9R_pO(Y3::D_<dSILC9-P@p^=k7?H7@C[JplD9JpD9W*gc,Y/mnnM3/h\']urD@<r2%p7EQ5Z=&0#ugI[O2rZH'6%?(M%=TNXN7_f9nHO:1kWFNsF:qSd?3Rh4nH!E0B)M;I*.aF#_BY*Hac(r#R=142a1Z0:1K+k/rYs)@ZAG)"IY7b>]Lg1O!^Z5[h^%VUf\T%Dq9k[(S'o3U^XB))l2K(M:8ll=*@M\Fhqn#U[GF(+'s+>=c0.gAL9FNOj-?`;c$Q\oOC/<SnU;fus"30!a`(5V9d:m2'2l%XK'"fOXhu!I9WY5c%2`!l@?57i(_A0;Y7P$mj/Bn)jT5nDNm"3:Ct`aHuS,@Km?72rjl?1[9%P))]q,q2]/#EDUG+u%l<Bm5e=sA%pf.kfn!,TXTCOSM.AM7eOc2P1I<L=Qqn\&#+GGk"@7sr9]U7`G5_63"UB%!5#pl*eDkbnK??f#NPEF5,4nXmJHE"q_"r-9*?fpK!%Nt7@Lh)l,h@C=:@^^$EnQ\8MY8LS!04,N[?k7;V;%gi+tMUR&-1XH/L@6GiEqt,T;5jPI+$6E!(I6%Yjo^*[4@;p!X?_U+@cpbGH%M&&MbD"TT._6.Sq)@$!?&Kkk!@76,`*RKe-&MOd91/3D_5`URkIQP!HI=8Fac88WM5o^;b?P98&55S/E($YeF-k8n:_(Ok\Wf5nR%QqJ'9ccL8hMKf]``E6D:<%3#&V?l</7q+f^bLeFX(r@<g<!g,kFu;0Z?Ws1^KgN9WM(2F1S+6IX'T$q"JKfKA,Wm3hL?+=ST.6-)%SVmaA*BgN4]m67F?ke!^P?7?G\7QKp9:47WON'aUb^:CiKo&d'Z0Q?F*fZ0!Y4FE.NAqB8`_q*,[k7_fGVh><1u`4#/'#tKOF1!5%4*P%V#?pk7=<fJ0OF;s>/GN3/_giRsJg/]uXHA9g6.3g^10oo,&IYjC):6GrJnndoNQh.ll@8(L4Oh#mA&u[e7r=B6@,M-iE@7l/%IkNppZZ]n]4*DD0?$PY_e'eMBCKX'fA\(ELJ_FFW(a5:tXtY(-?G2ukhu;-q#iRrT6/cMkF=Hr#q9RSOZjHJnq9L:<G5s73:\_O,%MAQ$^62N;uQNOg-chida)/QB-8e7pXj`U*d]^.l0[_H0eM?aA:ngO@Yg/CR*3`Wj`5P_nkpXU/Y13qronriW1)L:eELuc2Kio,ol%M">lC5ke%r*hB?&VMk<5jV7VTg[b6UVaD1q<hTL<dUIWo/7shA3#(AM+>-VR?,9j5@"@thpj&i:$_.SU%i!ga?Mk5Ys5DE3$<FqB%7;s/`NdSeC&u5AVKt"cLn#TJQI9_28c!FF7m2CJM4UL7Dmp1F"38:2K\H#d54B+OB]nerF0*aWJC]:[3`HCl(>I4"+3sW1d.8JMS%f;bLoYB&90^3T`EK[?`R2p&'n8.VU4cWDCS(o??3jU*C+LMK>,3'*F^Dmq2,q)nT)2V\CRqc4c<](f;^W!g=q0B^jF1@82[cg)>&%p>o<eHf?P/5CL\#ct54t2E3fP2-kOtF%X2[Z+aScmff-fKu&.GLlG*5'A_]hVNN0&\\_ld;ot.N=T+)pVNN0&FGaIjf[TrTaP"#(%j;l-XMOJDJq3CQ#Zed_01nGVfr).Da[o,7`e]V!q?0Tl)?gIaYmBdu4YOtpL^RALY?'Gj0*-8%WfWNcroF;K)QgHNL+t%FQd?6F\%"/2kT<8?4i^YQSir=A)WeXbU?c%Zo<,;h<]n#tcKh`4feM]4=AVWL[g]2MAK%=%O2GB%B&^NqWBFF:bX[B(?`W&,^-c7+.6D`bO?%ICEOtIp2hOC"qNeV&"s/U<_UtIjcn^SUB9TFLrL;rhj\R9)H5?[G/7hY0]74BtoTDE,^I(aGo#rA.r/AYm27+[9V-q#l">Jb`6a&%[J790ASUbYoGZ$J1O_EREiZgYn=Y#`<PHA@s'/>O?2`QtAm;3.$R*'Ve9bC0YnaNSY!A^e,/riklQ'K]g%?:*<o:X*-\8tTWS(c8%c@5X3\*hSib:)nF#q="#*iHo^;]+0??fJZ%>XXJ(07"'RDNtNR_jL$QR8TND>87ZL(F5i5]4JO)GdOk(WC9AiD,cD@K-1&a>N3J]%Um4;p7,#m-)("+qetSrUV4G32MQ_5Q!Wk#@kj0;r@C^T^0[7[<f\WGo3_^CGBB;Q[HX:7SlsNsm?@RM^c.PsVl,MELlRr)t=&:rV%n57)qf;r37S//GE[/$-L]\%EhTTrb-/am-7k-X>Ns'#Bar9s3_<B8lQ3Zf>u3,*)H6^;d05$-j<!4Y$rnb^KE-ILkM,4XjXqJ*Q_%q/Pe'q:RrZ.t'"W^+i4BC>63*5P\@.j)r8o:")8rqB`?6_pOXC6^dK6E*d)?F8'QbSpdY7?SRg<\(t;Ng&TU_]=s?bq\pZS:C$NO%0C?Z@an-mcY?ii>BJlPjjA9B*)>Yu1Z#>e*ohs<cY'c<_\sFd3fE:#"q"e1i+J$@TmK>f45YFH%X@<L9Z/=JrS4J4;o_u;F"\sR?%%-?gSeC+9G:7T+f#mhSkL)$O;dm.C-$\J++hKY=N45/">W+M#LAYh>@1?-"q-B;Q4\+,JZp`d2acT](+'i+T/mI6TgO`+uQ:&X!s%fB)!)GoX1b.uik$OWBO%/?LPQp']Nn]:YjY#m.)r*"&NLr0S/<:$68XgnY2nmDQ>=Y7$F&\V=D$<,jOG/&&S)f]u%b@QkdkEUH1O%?lA<J^K[;@?L[*4-HobPo*/=]XGiPUBUdK9-dkKBh38M,b5K4<JYP<n.*Yf8f$/<I1ef]Lno)-A"1pd$G@']HWNdE-@^/&%\LVMp%c+,cZBTm1WH=M#W!qeOqH@$gB:">f;<!n'j8q#Du$$C69I9,&8qco+@kp-r,8ii2&laM5M[LBmja0f+dYe7;q7h"$A/h-r4Gu\Bd%5J$SMBh1MkpUpRhe"Z[U5>@$pH4tU:]2JQli9QiH4+b'V5@QO,BO@C89Crusg'5sL;Tmr<8_tD[\#U&+Nl6WHZNa;C,o#-XoEYAu%E3X1+OAPp_q^IV'>Rhm-hYreE9850Z)$pJ9jnErVA2t_!LtX?&\ks:`bKmi%YqjTo+nKX8,WsNC?3D]'m5<28-[3@-5I$-#EFDtn%'uo<jq5"KRj9g`?/<;lP,1i)i9OfA!%,S__5SqS1]?g)Kha+D!;AW!t+mr+fD3/60gqC'K<#6,eN%\V*Q==5mTSUt^:eStL\d6(_%7V+;h3Do>Xm\RtjUb?:+WXoU<Rhh?T0mR8#NPu"iIKnY2dR4o&#G8Q<dsHl35eWEd^E-]'EQ0`qhgXP7%$O3rJL&KT,qO1d)U"#*%PrJh:+OUg\X[J>n&F?t@8Kbs:RAZa;aK@^dXf18T6]6XA5[t*?^S7XDY]$TbK7cr?F>cfUUli&97$Rn-Q?%/'l'HWCY_s*L.bI$A%TTMb'GV+hn"4h^Ki6k)[3oou`[?"O6F3caa,rf(JVmRmn<ni+.61emYadgo$9Y[CPg64Ot%AP2?em=lb=`#M]'2E==k,^K8pL@!7%%sq>]psQuGe^@/;iIfi/p))2L,5-P>B='%76CZP;i/IB*:MAnu;.m6P7l[3E*SKBO\JM@\]1r<cGh&N)Xi_CXIISdO>",4aS)REK%hB+CWebrho\[>ZC2jWlU>;^\).9@o_a[NnpJ&;WUrHA.=d5n<,?16k(4St`Ps2.Xec)[:sf1Zj,Qrn\,OIIb%S+$<%?CfCaJL8$:%.<TquNQ5A#h5YYtcEC^)p$pGk_+oG:cR[m?jgG"+^n][PFa,g*HWg(Cj*a\EQf,XEJ)pI:Kg*;V"2@TP"@:FeOc*Clm]:O$p%2cR%Y:3)X4:cu?P?":U?2k?u5/W^O;"Tg]O[%.Kr_W/Cm.EK=.sfUi*':@Y8l7I)r$rLr]'4H.=J-MBS(B7$BXs-MQT.Fg;RLm4kEd&U%dF9^+Ifs=dd<7AsdVV6O1T.d,dBR+B6S04:UZXL9K2GliVa1QB$RKO"jH7\Z5`XnIEuJp-._Lr)5UFH!>)oaPM-e\3)bZhK9u@UM%BYZE?B"LK5V-8%>[qmY"fhTpmiJVRT!Yso=92*N^^.j.+E)`25.t]kG%Y/=U"?D\a=:IMm:$TlQc;g-%CdZ/S^$)DTj-Lko9$u4c%,!\k"[1VM,7o5p^e-qJ7&HlDX6"Od:!L@GQ@_d^+%lIQCR^V2e?>TC*5UdJaUdJG:<B1\.S;V8#?!#V`GG^9Xd#Fdb.Yr,AW9Dlp%%Pn*B"orTWFD@Zh!F-?>ckQY]`H;#5>ucfoK@A:X16)MA)IUj0WPF4!"j6=l/0J#"7:]jh_hD\<N8bC?_0RS#JER&f=jC#f\7X6A%%e*X;TH;2)'JPA!h6[/D\5GRq]'HkHM-4pO"%bj0F,RW4jh6Z_74g!tU?B5K]Fnmi!.GBV%Zn,6\PbA8JNoH--6QdR82,g3L@[86%WNb#CdQeTebh#["Ka_3K;:_Nuf-8(^-.[Y(%F"sk:]W`f8lQH2J@#a6-C.YK=S'QQi3rt;CJ^E,b655'fQ9LgOHH6k:]T9^=YLc`%/@H*`DVIT*F=:PS'ptPcB`JA9<Xb3!"tZKc&LRYp2UKVZP\Ef,+QGKc5,-?./>?8Pkb#*FkZC?aMmfXrq7il!m2/C$(6Pp('VjlP%8d0sG@>RteKM*Tk!\fA+CPH1#kQ9E>!_$[9jT*%),5MMc%DX+V"`.mTQ@m\AP"Ynp&?NI'd)/b]/hr&cZtuOLK<m:mWM+S7$Yf],%\cf-<eDME#3=V!RBU`+s(."HM<++Cj6WC'%9b`.\AlpCD#Hk%@1n::SEe-lb?dAI92Mr>Aj'Z&`0sJ`=%43Aq'7.+3,5fu"b'k4Y%U8YG*3ma2SC.o<C75=4a[6P?-#t><#+LT!la";%Vh)l$nf<puZe85;#!m%0/@?Em!TE*(<417fsmYGf9?mR4W*s\.j./,e.1BZU0%i7)0fMN))\,`n+R9r)>^%l5]P\n`R69GLrt8cYifM:,NV",:gSMr0Y)'J(t=_kIcGI%kG=oIe6=/@('<Tu^8/LGsmS@YnjY$<-+Y%fRAY^JlJU$`Q<F81GP"QBeWKYkPH*IK-4bkk,YYe#;BY_KJFf83"!_29u`-e1W#8/j+*T955gK]e;gtr)'f?H5VcqJh^P!4^l2sj%cWP?BQ$=EBAH8[K0oD@7R2E)c)(<lH?):RM(C\PA)oN)([pP#U_:CFR=,KR\QK#CeC.Q1_"Xler-\*\.%_.%<2o&6"80&"864sW!%RAsU@UP`6,JFSc;4-p9W!.L&jAs00>Lr*kVr+/60I'-3U9tY-N++tqG7151@%?9Sn.tN#XC&lb\!To#m]FD_P#N9,9BVt0Y9[]"0%DK:2o$2+W2@OtEE)$!-h!t/jq@0$_`+C!<<J3cjLoS'<5I`WgcJAPBf,XH.VH9M`qBi>JjN1jECF<p!TWD(o?O+Vs[6'Qqs"XF.Q%)c:=$&W$[OWLG/O<Lr+'1^,qN*Fp9W)dMto5[dW"o-H(B_DpHT3b#s"1Q^h*6mI_D'$EO/@/pX#;-;%k!2Mk30\:9;TYRu9f"m3-%Br/Uu0Q9DbD-_q\g"*A6;cgDFUV8KliBc6;^:l?gg$<&7anc?PLI#4df2j;&c8t67Y-1OW-I]i>o(<a])PAQQdT:t:U7jQ\^6/hV%^@I28*+<59(1GBtSq;ee9ZFa*&ZB%`1_rt(/0R_aBIkVf*3&!P7ZNpSH:lBaL`KRJ@RrnAWQA<POf[i*lY/():b9fZ[2?"J=WF"K%)dF9qeiHpc@&F$_<ENt[+aR,7^Ho4WYh1S6]*d[1=b_e8r2Cji!4L6J&-\+_1aXq5PbGerD%,RAD0Z:U=O<1_(+SNIeM3KB"$4aT%rJct..Y'1,77O"V"pU%0C9bM/,$Bn%@+^9--nqV0huYJtqMjuZ]##PA;j./"/6:',<2K]:)@Blq`g$[@C?e?L/ntdX"jBS=e]<il%V'0BbdO5ScBOF84L^aoVL<^NiC7@oBkU:hp+9F=G9f+7e)&P(V!4`rs24J:t?,]"DGh*.!""QcGLl3#_1+(r12Cu:SFqL8O"/\F\%XJ*InK:A2tgY<p8*9[d?ht0RaKI@HY?<NI'Y+X]=4M^TWD$oDa=oKOKV#oim4A`aa]F7InKpk<Z.M`$=\V``XX9O3RF0`'<6Z6Wf%6Tu-G@pj-_4V_:4krL>GR?@.EfQY^`V_SrOk_"C4=&`%OAd]N.6nemu@rqAL]gY=*E%G.:-nu-PF>5OYRUhI71Dgl?72@MI6.RU.%EX.:U/1<\,4'\#dJiY;7OA[*a).;Z%!ScYM3YtEkCIafo+P"i0d6Ouc.&(]M_)qnuSB=CH@1u^B=:(uL/0M>J$6I<SdEjre7?!%>%fC&q,l!!XcfM$rG*+3:\X_fI`/;jZmR+:;bO9]IjG.\6&NTQ)IPD8dg.?=]i6<WfFPFqtVBi\Pl>6-!!L-.J&!qbJ^^oQR*M01);%dMiY=@#Z-J-?KYF<o_"JQ$BX!auBm,SiE;GQ]?/2^]u^9_EC.s2X*QT,7<'R=QV(CdqC4G1lRNp$4(n+KO@<LIL-9uUdqY_Ue7<P%'aj\cZj.&@,K!om,[R_ZTZPRi*a4.Q2o/<VWrNNL%'!]d_Kp?l+9O4ZQ%:gRW%cX3BgDkZWX/8WMFFBm@;QERL*7ioZ-h3u'%Ej:%%EkII)tb8A),,d-AQrQ5@Yp"d%$`dj[gc<[n4OhE2BYXiWeCI&d&U8XJ7hV'TV?:\M3/,881U@%ZiW:F3%U`d!lhKM'XUbp_SS+j%S6mTd_*McGdNYt*nZSC;(r&UOne"N:`O6$V%7C:6.$e<TkShM[Z=5LETjnrW5G2#tB[P3e_"\geJ=/o#a$C#b-'#.,h"oF6d"!mU%SkScCJI=a@d5%aP3W]DJ8LamsVdimo?bJc<>%``2Oh-ENLat3^8fB_*fHAtsCA#,E`L)N,9*i;NQQpsIO>^E866LQ+q,5B@8B<\2%BJ0:sM0T_3`V-Ga<<8]mnL+!=OFn)]b$[p,K;15^/4&Wf8FuDp]\/4'49UMW,U@[I#t0+oHYX3s0O.&@%FmiN<gehnbonAe)$Yb/%ELEI]-KB-nPqE@Y=$]D.8hf*27Z!$)g8fr"VWk1QWR9.%oL`b%gBNKU_N2N8"_1Gd6H`>6!_IN37">S9FGD0\Wo]aXL,QaJT#FP:%a+MEMFI?^%ERE"8W4PJE'_=Z4D2UZ0&m]&pA:.gBNKZ[g'c,Ps1))lR_Gh/6TWsG%,jRl"$Y:h*Ab@RIjO%[n+Q!mR+Pq/ReY*TW%i/q&+8#F<lN(H^$mN.6>$TnKLMF]$9DEo\u2Lm3>E+!_p4gGLP:Ydj@]>,r'RHon[9KE.f>aPLT/VAV3n3'Z*MKn+hFjjg:&j./8%Un^/j8o3%s-.KS][o':OM*dW)d,"aH`,bg1*i)RYHVcA!dc/"S]BL/_PpYa^OiVYR.MHYf=Yld:FET@h9Fa(c._0W(jL)Lt_0B)4%YXA$tCf;W0[8=V)ObS<0Xq2NF(@B'Lp-oOWim:_aV\<D8,#9N[-!V[&!IE9_+lI9D6:i8,&YRQR#G=@jC6CKj!XeBgg&Sf9;m@Wc%5YdlmH&C)PDL:"QU[lpN,OM:0Y2T/1$AML$\++8G?"*>elkBn&3($VL^C9kj>aMfXDXi6&d#ERL!Xb5tIDSh.>hl<_I7"1F3pK@<%2H9T0?hnH>_`;P;a>[)&Lk<a?Tn6)k-J8^\:n`.;lkD!j/CX=['V)mLqXt0n[a8ZKX:u!^UPgSOdQj^uP*JA'Q7C=PDl(h+PC__\%>:Hp#VB]4m;Mf%_pgjL/bs?ql</TZV(BT"C9qb94oV<4@?*MO23>I^\XC25@U]lmJWLuMmW0-In,c7<?eQo?8JAa-6W*r6BT`Q8-%UK#+-8.bj$Q3L$UnIeJPWJ!/KWC/IGN`*d!(^NC#%.Ohl.GPG">6%<XXg#U\5VQP0<0gX^+kP^[)([?T=;i(h/dC^*;CNg0p26R_%_AcTH?9"6Y,S1?*dOaT;P+i^_.^N_FFTq=HfT+%uA[IA,i#Oi]JYTMCVMLFd,\C%-8$g-U*La.QCct/nm>k,$NVbJe8lsNI3TD&V%4&uaLU)Fus67mm;'Y)!mJrQn0_6@=?lYf[/L5>ueQaNr'!BCPLS5]^bNF$Ldb1J1W9TIPG\4)3"'UQiQo%g:`F;te$9=,4@NbTIX%TQEic-&0Eqhc=t`.X>PDrE>kWao]0(3JG2/;@)q$,t^No(bWmL.aue(_@kC")43)`>BIbL.B8#OL6g=6*?q^>'L976C7msnW$df4%kUa4Z$dF:n`8Z*qcJm,(P`[H3'%KC$LO5^)G2S_>/83)XnM:%%ZJM!)e@8,DnVDfS=FJd8E%7g'2*`%MCp6b:d;RQ##(XfmgfMr]%6$:*R"tlgNYn.Nl`AV`'1u'\'9jFJp>&l$r*%n^"(9#V/Qt%of[N#??,tX%gk:ii7DJpX4=ChGXF_l7!K=Z'LYXVKcfrW+m'II'j%G1$E7:_Drl_C]VTR`2I1("O6K43dq>CH:RE+^*_=Cf;t(p_H>L<$$3M5&_68V\2$H_)TggaAq"0U,%YqR6ZUcOp]ED!1g&I/8NYm%;=Zd]e%c#'aG@$Ys"oum.YVTAKMGB@#r/5I`t[_rfMW]AFF]'9_.=u3(e.B7OobZ\)CT#<=>Ndbq6b`+aDaM&F:?m@MRm=-5m^!K%\P1Fc1j4I9iNY$5D)+uVQ.ToNS[J%2fIf4LJCUV3iNm#MSoBGt*S5kk'Nkqb#0@`RNm.sA][sXne6KF(cbtB+C)-OQPrb4]RDs!H%^n&=eGZ;Q>9-d[tK=+(U=i-\e^bK(lR,':O;N!Ac?d&'ZS_PSJ]nco53.Vh&Aqpo;2F*?*>_N2Ii]s4Og_EXChC_>\W7UQU(7M?D%'70qI>2TEBBTC3GL/-JO7,R@,KN%raY8L#JMDEPn.eBWFg3:q`kCUp-Yu.4RW@0mr_%'(g5N>WZ`FuME@3u"W-mXglYD],[#!'TF%+g[h?)@d<PZ3ac-<C``qJ;0fF&N\JW-%HU;\,IGjs0GNLj3[m[#6Hb</TA-FMjrCsl1u]eFI!7<ETLB>Z3CXR/0Q@KKri7r;$o!1%#BV9X?#s:`Ufhr$"A>+U"iHoi/8ur=6(?;O)=Ae!%Wg!=Y'a'GMJ*N;k*&aj]>V.f^fK-+(ipuPb"VAg'GK3TA3+*)1+mhuj<oiu%7$PuW6qF^:[V\JXPB<@J[L:X5R9dqu5\#J*gOOB,%STI6n@D7b`%(k[`'E!cc7d*6.5H=E+'1aq:hMfn,=CrSRBEB=BTGQ_bUu5[%;eI58TZ.V2_P[Jm/n?H+#.H^W5ZLcUYI)ZV9k;5PgXsq)XHmH:gg;3X)bY-#N]Hs%N<TfWfbEfR2R%;[%Rh5#cr!!1KTRMSrde6\%-jcjId6X=+VT;o9ZEYDk>1AqIX.uYS,tqdAOc$&@U_7cc*L!tmAMA<A-]1(OA<I%9gFeOW+aN$a$PG9@#)6I>ECIb[fuCF)VTfg7%:KTQ#*@`N8(`#Qb6):8,66O@)eaUp!#pGD=`4Dm*8BYE!L=n((F,q^NU\V\#nO`$$X+N][Rn5f5"aoi6U<.Krq)F>F9elsY9R""]%CN>9rfIY`#3[VU1St!l_73#/=9Q<ojLb]`bZKU5K.&6G\0:"Np.Cb-<*#2LE'+lUT,)da#mYD%^p5D@4g]\5m^dbKO$q@E+=-oY#%+<iWT&Jhk5K;_7G5YZd@/g0I;3>d<o'p]Gf=aNRO/"tMb>Df^u6uV-XJkC&8@VLNNn10c$!$CT9;X6:]@6_*9(22url%/`d#!8NW%@??@VT9]mE60ZT+8dA7A3bgas@.FAL-3HP$)9_Dia$?tlb[5u/$jnauM/)7U6t?.lUIFNIM,#G[i&?QZlF?_L#;Yf0+UMX,Yu$+X%<a:o!>Sjl1l,]R@H?.-kKbE/e7Hm2kL<VDo8mN>4bbrGj-Be_QV3VK?1c/>c<eMq0cTND0'L"eM6a$t2_Lrj]^d]([$h13!Y[6,V%,]ueJ-3hso7]k=c@4.>-HYAeR7LipWP8c2halk(PUM7)TT^)qLqlIER7VED8OMulJZ>6eL>h79`^*eHhEll=,FG/*hZP#EJ4=#lL%F-%ob&-4>WUGu/uJDl;59#$\/(n-G]=L=:-p&n3.1<3R@fMPk;Od8S.!$Z*7LPfbVr=X"04Q`Fp4ElG?)3hY4-_9Kum$kH`OWjgY%AoKktdg_Od14phTJuS!nE?'qLZ<\'#_B_rIFrnq(,O5\j#&Pc($Fbj'mq@t0<`J$3\]f([4DET,<!b#?+>$OFgn2t&mOTQdGSV#+%c=DpP1^U;kfr66XClNEWO)e`uJJs2T&7]u^^k.MO!P54=\ODA?i2KOVD+4+d2O9_fc3-52&K=B>h-Ld!T^EZ+F6Tm'*[E)[j:Y36%L8rD(5Z3g-8hrgm(`mh^=BY!818<[VK[RZ"e2eUUT_VfN\_1_=pP3?f-7[t0>%8`J-C$<l(_&ab@P&%I44UKjkMC1$M]7.4hC,m"%b&';MO=HGHgAfpY[C'b4ACY$`s.Na;<#E`u\3F^_Jl&*N%f.MHfsJUV1X\'-rd/]lG!p_#lDa[Ib02LpY'[@cp'S;Z6QK<!RbOQK%,&Va4eV1OhKZ<)l1em4to>`<PNRO;U#22o'4R@PrR"BjaD/!HhiO3=`8hJFW=:c^4Hu4i-;M9+uUhC-?7#t3%s5A:@KH:tB'-*k[%>E#Lm:J7O`SW#tWGB*Zg,%@F@&:B+=7;<$J:KWgr_l@r%=E9-dZV<TVd\<,EAK+ZoON8K$,',g4cbLd%M_EuTJUJc>9*;%m3N]M"%3o+c9.p-,3DQr^qP77P^b:0%U"[l+7TPHnc5-3[)g!D4Z82Xm#DhdLJ:a:B@Vue+3K2^?d.'NmL'k8-YWi*V06RB%].a^E:GBK)j%OaL[8BBgR1K:GKHi=.Jo@EFIh_"-o;OO$D0F;6\j(tM,m_Lc)@PQK0JEY-.^m.O%RQMJ#pPs]`90mOb*kC^$ch'qf9qP*lNa<H+S%5@*s%=(!0^JTmpgpeo8+(Ej33oi>r4s-6_`IWD%^q?]6F+%hp"_sm`SJ2JmWC^][3q`\B[Cb)GGipX^_Jq_hi/4j_>]!U6kUkP*b%Y3L'#3>CF&]i_GR:YqtE*VPK$h"f&`*%V"reNi<O%DstJZ\JHBPM^bFY[FC?QH-b)"\9Rr\4tj=#sk7bqMgSW>m#?=ntY.sEiaAt%+u`qPJKg,7JFmaG'IA5AdrFYFAs=o"#8e5=Gsgj!K,p82;1ul%_e)fW4!COg>m\/"g]th8<_a9J6.*[F6oIU%9"5oXOA9Q\IC?uZ%R<gpF%OO_d&Icf%JTKRXp1n!Q(##c5$4@0NYRjjSkM67fT%,5Y*+f7N'+KDA-ArM]cDYfSZ6cdLm;XVC%(Z2nESBW1+Fan5K(Mt/%dp^(@W6':pBK/W(K.=M5qkZ3FD>Yf/X+:D$Om[R`#0%&[2kYT+0knmZ'kpqVh0=>pj1EakYUH!uHE8[NdgXb9ajVef"[nt@Y"2/`%^]6(!dc"fU%#m!DJ"<f%CkH9clISK8PZ6H'O?5"b)'i5LWu?3dZBUb6`O+F;;F\lE3U*bR=YmS+P;Md["GR(VcoJ(0&X]Xk?'7oc%<k=D4=Kn7P'qSg,CNt/4H>H0F;Zq76"66+2g<g$]W1D!S4t_08Rt$S&K2.m6dS8ce/QU((E!LK@FK$e`jJp)&&*#!'f(sVQSQH#H%9WUD'La&;F6lBAjUb[,phm%_dK295'9<F^e#qkQ\hT,WX</0l87U#q2*B$])XA7\[2>Eqk3B13-/.BHiSs/=5_Bt`*I6"+=7q(Jq%_XS'CG:SnhbSY"n;'mh8$cnLj8SKU%`qGSI<tSA1nnP1<C'j8)W^\;QrJWrG\RE<k!:m=>?<-Wgr&N''jER"EY39tmL9M7$qEBJ7%(2_K")Xdcs<CKu/;Q?TeE%n.;\T@"5embm\?qCdQYVc7COL\e<@8Tg&&g#403>_,ncfKrD<bb(tg%N?5?k't^Z=)4_`Ac_5"1qPM%%3%623a?cEON\<;VONC0Otr-k5;(reBGPG%UbcC593D6!/=!&85QSH0&O^SX>EOCC1lJ-+-H!mb'0Yk3Hge\.e'ascf=JJqHJX?\%U]%"QN:cXecbM'=V>X<]q6eOEd="!0877!IQ<Dt!3E$+WAmt4J[$eK5_L*f&=VkKgdLX_0L_cFsX-4O4)X4Y`CZ6)?JMEDIipTi!%+da_PnUj8":,]iS$"RRT64T<>+Wraf!cH@7M9@*):U'1F4,1q9-_,:e0+m3JW*`YgH<bU9Q"MO)<YPrE5pLX#M_R2G%lo1<@Ls2&%8/2T?C7r'?,g5N,[b(T$:U8QKZ4n"J*$?sUp1IJjMe%s6X[O(`4#p2e0fZB"22;AiZVrR5nt_0+ijRX25e9[u2WQ=GiA[IJVPP=e%BgYpe??;!XW2+*X'oGJc1NeOUN5iNuX)<h".oCrZWbGoEfn&WF5HO"+g^m)AI2I5%4)O_.!bdtkXi0^^i@oYt5hoTQJLXpa#M^qt%_@DR3-W2g6PW;+/H=U/8Jt<!-c`:<=6L[Q>=Ui/YWaJ=AkTWM'mf;:4,H)O6OtW9.?($,XSCNs%gIBNjPVTTf\%n%?J:65<;`G)f%N65R(C'-3%>O)BX@N$4OUnKr62FNmS5o,"JZir1-o&$$q>f_>I'Ck.`+G/N(8]ieOJ%8mpbF2iaT$Qh4!Y2qKoibcs;C(CQ\JUe)%V[N?<5;XNu!,V.Jg7Ca4g$aC(9^fsNT$BB@pq1fL+J?e&"5+=p!2tVc+5RY9^kYe/YmNr8k1;n`WZl8ec\j2OY@(?7#H/iSc/j?e%V()a\G7t3Q"UC]'0LcK7no5W0kT'Y9R<\U+cE!Bhs,/=+VR,k!;[PGMEP[lcg]`p(C\TZ+%Z:rt)i$!YX'F7V"H$Sqn]W1M4VQ4Y%gEoS0G$cRmOZQF=hf+[R@&W2Y6'];]7/mas'Pr2h<%5Q0IFk%)`f'$B0l5DJ5F=`=E2CoX=(qn@$5SnfCp"J`5muP`b5;.s9#8sR%!iAS`59HMsIU5u&=L?=7#'hqj.WsAZ<=1VrFX)e(mfeBgI?3jH9Nr*/$8:hHDQ4C%bec"K'Lrk8_dZ63%HM0gMlIRt1SrI28lfl-%'KVqeX3?ep7u^s&'k7etkG<!_R8W8@dYh]miN=r\*"AVV%)nU+Gu?=FFW!<@K"S;n($8(.QK=8N2WsN(,l0O;PN'ob=.U+Bnh!S#%_J@>O$DnLgP97)u;Oe"XVAE/<bs[\L`KW]!(*W('.>8P`,uXN/:Id&9DMn[PSmrnXR8Ok(H'hs(4i#,l=A10H7GMrC;[P#j'3`5:%U5P02_3C[tcsE,<gU<MJLWrLA\hN.>R43if%g$%+.0WqNrte?XqCBYo(p8-+(YaX"X?!VT;Oi433g`fY*JN?^9!Pp/34,Y_Qm!^<%;n(=c2lTAFB_V%+d?IM1^qQh:!>AE]FD2])SQ%$j8VE*lQ,6AE/e_3`_m64=0/c_)@$.3&<2mRBDlOKV'm&3.9#8;M=]?hPk%.SV%UIK^Tc%hc<"cKo@VFmOZ/k1Yd.`J51gK%3:>L"KB[Vk-t=B$a%bYh\I:%KT].Kta+R5S%P2D,Jt.`EDcT#;B&(at:lol9I(<=3Mq%d@2UnmemfZJIud%<K[a-[DI!Dao_!/NtN.V'Y$dq4bcr[E5N(3oI:`2b>_juJU?(%qel#cpJp^,>WZurkFBbh)_]hO[WE>'(he5W%<EMcD$jXW>\2f/.Y'CQG[MP^DAU<D%HjSRIZ)T$?Y:u^.=pQd$#/IPn`G<%I!`Z1=Z!md5dD0>V`PQ`"DkdcSp5>t&!!C+4#ZacV%4A[)G24$$O&4_YjXoPdC,9'U>F<iQeO@k,m1^BJTcSEhI&<SrI0G-+9R7&>jgg;ndOHet3;da`[!AUC\BEo](Jac]9._T>$(`$t:%;8?9p*I/t3OQFC;!e`Yg,&Bf)FBpSU('IUagf[VV`6.:T!JI1\n$#+VL&Ls4.1qI'RSAKMWEUSr`[R@E7@=/BJ02Qn-`pr['VkXa%&_+p3s5C,`fUqXO4q^Sc1u/g'Ec9o]j-QFEa"@I_>O_>42]1@]/DX`E!G!=#GQjG$.@F[R?hLe^h%`P&6%EM]4-XcPR"^Q*fbQ9#%;&kd/7H72oIK:ca1qZ6:!Pf-t(k[o(:G\79L+,sgppqn2G87R&d_Qu7EfmC-<R&+ml^"I;HX1g!+CUm0)\UN5BOD;I4)K%^eVDoc%9F?^+>VUga&-bQZ852QP7+)&q0XNKF_\K!qDOi&GP5-`?m[>rkfO=E&]R_]YUg[XR@j6!A@aH&0g^!M71=*"Yp^)7EC0CUYE]FV7%8Tj]^C`5GRFDRt[0'9mT-[XG,L"iX+j.=5rJn6@bPm%?.U2KA">J**c84[.E)^6XHPe0Rn)``XP5b""\q=87'V."_7NI,3kaHbi;%cZ-AhfU[S7F1"UC&f(ZQS&!do5gU=tPr6KFd&G:?-\an[q@sPIVIg"rBn74Wl=dl$&4l%u%&p9mT</;ri4j8'@J*ar[n>h]6>V<@%*9RY/>2]J!rJ\*oE/CoRXI]Kn)=!1/6.`mEHh7GL;9Bck=#=(6gp+8=1Lu!V$'#flWi=U:YJ\(FgjNO/m7eC\RS+#40B2#<l+Y7"%AigqGdCK4h=tl)al\;8F%)GECPS#YXbmI>^pOO$pi)k))ae`D,C5/*PpK&iC%VAHJ22B.Mc@mT^gHnR&hIJ\Ga:rks@E#>6Mh!1K%9f@BPKr!7lQRt>!0FLe!`fo&bA0M@4_V`41"&CDF2cW!+.k"8<!(sJ;JKYCt6<>[-'nB1j*Ge-I!0du:!gL-1IlnL1gO[fIVX.=O%mBk\9+3Ka$aO\\s:0S#GjiEA-`lS>*+/'1G<L8:[ZMCG9<JClP*+S!:<n'r)SKq5Lc?_;U2sB6r]'efW],-)8<*c6)EMj!)EAgUf%?KqTRf`UHr'gkFQqhM8VF7oUHU?8Hlog#-8if5)4QJDYd[[VUX(C'fQZm!-#Ak3FJ.:NFULTNuOnI=a1CEVdt+?`h+^D2jea$l:\%.kQ*4`U#rcpTD'T>fL)-o&0Kpq&@iAC/MVJ^S.]8>'$DCIKOV9)#1uCJ9W<^#0UB_$<L\_H426]d;`PN#F5G%hoKeHDA>7aoHXR1%0,*B,d65TO_(qJKYg\?<oNjBIZgg?RqMfp,j`":nR>;"^CKRn_#g#,2eh3qC%)j?CL"rK*9_guN=iFuU^2\i>EkSWU_`eSE:tR\+%lf#tHOWRU+!^Tis%LlC_QuQR-4GR9t;qpAX="X-RW(8#ZK`4<_6&$g"Xt$f7O4OhYi\iL&\C'23AV%h^\k2G>[PTf0Fe<Ngq\Gbk%<SM.OOMlh0A#RLsnW<HJc,%+BH59ibq6,277Z=D!+C@6@[uoa*<me(+hB:NVTid]CN7.Afo-WJ%/LaFr-O@Lk6ho*d6m%kR$(a*d%K=\])P<F:j[M/lr5T2g]T`AisRuH[['#r,JounF10M.[<YAFa_!Km:gRIVNjraCHU5\9s\]Ho'?``do0kel8P.gGcG;9nR0W;c,Q%J/oS9+Ij,u:A:is>i$sTk''ERVoU_Wjq]^<]l7/0N=H,;#-aNm;j>\j$nNP@6%At&.QS2q,d]qG84^UP$l.[5NckC*c!"X*N.=Ke%qdDir8KinkJkN8bCYp\o"feVjhkO/FGWa>.ZYMlc7"n\0FRG'V&1k@[S[Eu'E$A;H_'DMc8MZGM"=V*A%&\jrYoakKm]5:60^YAN%;Lt0V"_F48!%-9m,c>YepI/4]d$P#_P^r7e;E_)r'!Gm'B$D"'KuL"gii!Q,J`E@rk5_?9F\CcqG4R&agVq$C_o$N:/IIf,CBtTr%(.ad%"qmZO/P(QEfXTZ[4A^4K-,+b-NALr7Z+u5?.>\a&eh\^M$'8.00_E\g#Y2m]1T>Ud6^<J3,"=%qZE(b]LTaN'9/j86F"'u\%cESt203_1b?WG=5!)*j)4"Qr!IBXijo8TM_J_>uo.MSjBS+djYl$!\"^W8=:cqu1P!]DC:+3QJ&7>W?O^Qp!;gaT6@+/eBA/CU7N%?4Rg&d^NYE=t_K*CoG;J]kq=//+iM%1!`VtEHqAs,`8OLrsL?C4Lk^td=S@Dl.1f*K-8Ju*+m)%N)E;5cD$CoU4'9$KI^J>;r$AP%L-_'b;YtIU-#u4+,`!!]'7C"(]3=>9q:/8fMo&6o#>-B?FBpBFT$%0^D%c)QgPSh+)KB!BQD'$R%^'DDZ)I-&,+E9\mOg'H$#KLW%BV0Vt$(7PXUL%Flf11lQ(]=0E#UhYKm?+:H%9]l#\;'C12WCmT"'Mo18nB"mdj/`;MtMLuf]]!=(C+,:#D@Y\Btg+;YdC'FW3Qr2%]:50_/oV$PN\rTJHT<X:ogg#AKM>#V@(7c&5bT*_F3lG$eLOY<gmf?#Ma%j^4>+3u.BWn];Oogt/S[9>4'a6D*63E`#<!3%G?]W.%[/a);oqdqhoVFd\RhDPH/.l4uNg'eq#$.X0aOY\0g_U`Ve7"o9kfmbZCs4t=V[+2%GHk$P(t-oq7NmK<S6^92R1'0PnN*UkG_)CK%BN_HkUh)o^6`UL)GIGE_`aLS/"d=<YCFYAmkAL*prTeu5AiX0om+gV?^)tKq,J7O\mOJ$Y<[#8._/LRZPkp'?"P!M+HfLq,9:C8k%*94Q/3!LLI"O8^oTo<M9^\Nj]^eC41b5dE#a[=C+Njq#@[ub[>0=i9d?PoYYkiiQOO:0\HdnmQYH*.AQX0Dk.fltj`@?G:4idF`(%\)dt<C"ol?OX*Q5mnik?4qoQj;LhsqOiB:(Kj*U';0%f9N#5SdWo?t2IAsf(k,)`^L65VB#SJ$Y*QLu3QBI'W,)OsslnT/5E*X"m%d$;T8Yn*$*c)a?JB44VJ\<Y3^Q,Qk92dbpa.;CQCba&uk-M_e0Z\H?tbD:Og79YN-$0nUl?0ADb(A`&,S3n21&[nrG(H=*:PNU-0%6&[fMD:N`..gp/*#i=E%.%3^,N&%XXkEJMR/raE^s/(p^2fAc7q,2>6R?WEC1.'`J[D>N<iVUP9N#fGj'tH5#1o7p1mBnotik!HO%W[hG\N_!K^88b$f(gT^5mlLjcd,C_N?mPnBLdOFphp_jbYH?qVL@%\nk".7M;*4i2fFLo'S[<?>T[5s8i3^nP_.$0f+].s7R\[d!%Ea"&2]knV4TVN`RKAVG/N]lI`b-SDMl^P[,T/o=??[gfTRCKpY,>X@>d`)!.&4qB[*J58LPtG\g.fdJhji=tfogr:ZPfkOL@[W9_%&`6ZB]N7HgPV.`=OY"Nf$,4A%U3fQ.XU:b2M(L:03jRl%eh]OnEbuegPdhoti9"#+\=0]J'V@?:W++IcXNQEEYM?5L:iqA)XD"GD%q1;&`.G4kp)!)[?<kZttkLq?"ZZKMaJlHha0U,YjIJZ<SL3$A\PT'U@RCU&0UN'lKENuaaU:@WsgD0$em7qA][Yf<[I9`#tB]<=5%dPqGNE!i+o_c!3uorr#248VV&_PmA+W7&]?ek;FjFM)j=L#;kl>Het^);/*!TU`252'3BKr*6j.CKp614@Zg!HZ.+,\o!?`fM@BJ%g-<&NF2(\]q0qka0AlLF*K&RG%TiGn4't<Z^<PYBVT=[C4mia5gW-5^,a!tQgQZpY*lGuqX1NDWqRDEJd]XC77]g;qs7$:fQ&Ckj%_E+<VV3F0<6)AfNV9arpR7O7J)->ZqlK.qu7<5%_WK2;R\PO[H)7+>sMPU6[Ceso33N6B=/a;+`I96[k2*7duG@5:.9'X;LW)Ml\%5!Gf`J_sUY["'Ym<qr..1[V8-g9MJ1W#=E&MlS>K=afq,M`cS"?<[D-RkdaWfB$YZC'5gDX?J0RCce\Y!Q['k<a$R\*mCk:qAcrF%cJ<2_fF4W;XcMFI_ST7h/1N_E^(4.t<0G>g=,NN6[.F,/c'XI91U$gIpQ9n>H2TZsYT=N>^,&?P+m;==9ij,&3Y=S:BGs8Hd4i,@%4GsIeRT$#LN<>n"6rD`@)1W,V&UMc"l_5'/VJSHj7%?UY[L#,07fpA`bpPh.bhh&F.&s-aWP/BmW%&%r-DI?l-^fc;VNdY0TL!^`%-54'pbW+7`+;<^V19"2<-:22Qeg##e;'h/a63`i>_(`Q60.Pj44j.PBbn*j)GM0S!#/j-\H:1&N$35uu%]0;Tj)+(_@!8ar(a5=#%!J=$l(:/YB:GPCOG+aoHJALT&7@`,Wm,1DO(+:K8"(1:+$-h/]prW9Hp!Cue<BIRjl:),5ftjr7]lZ%l?lR^2S(YX&1tSKT>:i(^%8aYFKTYh45mGO;2no7Si@+!K\e.0\?q/3'Q^`Xf@eLf]<f"CnJgCO.%Yledk0p3J_-Z^/[%N4L$,RnQ@c)c-ZASMPX)MPhuqprsG%7G&N"7b?d"0^O>oViVn.GUXlsj1#A!7%j$1,m.epaVUK,`oB8@gIC=n!\@o.c#,P39#j<%W/6,.;('o9[Ze/PhZT<p1h@oADmV)G%5p?+7>NIR,a(!_RoB-mI^Pe.OVBmoe5le*hbbN753I.,mf2C<<2sB9$l`0"qANW,=GM8>O:."rJ]]6/UG:3-uB(%A*\[TE^B!qaK%=MHQ1W8nMo&d6<pZro+"r)]ca/.KG0!.\@"G[;f\RR2X6]Sr.5V.OVg<:GjBW?\$A#9S)o=guolrL<Q%G.V"%l/,m4P1$DYR*8fA%)CHH@@q]-:6nehC\7n/60]ne'Xsr79%*kqr0Oc^?Q8JI>`oL;<Z7RIO1TtNk,oo=,o)Zl9@b0EEL'^M'0R/?#'6Y:%Yj.Jb(`4O\%*=*)1Xc.6B0_ct@%i,.t&&0S+!Wt,i)c>2i_!ok#gLLN79sh3a#RnMA-cQnc&o+SB,WjNiJ&,Q\U&jY>l62:9Z+G7\=YTlPl@dYB%]/]kY%$F>iH40hAb[%`N!";QPW\a^."3[cuAcRQul<`i]J\dJH=1\qF"r8_Q)M-"nA9^CJGb8MR('9-OCP2ln_^!STh.d&s+(M"<%Ku!2AF(gWoA6;eYhdrQ5CeRHm0*DJX`#fuNgnJfn!/$<<'T`>4*W;<##%6*BA.AhE",g"<%DZMigXU[q"#.*9U(%*i/Fe_6!>noa%Q*C?,g58>J,Ye])^^1)s0,=XDLWof-/6A8ZJB7pe4c;\p$R6tGX+YrT[M6s?bK0F9bn@0bD6\X2[[7eth9;4H>R9DFLJ(s&f,iE"%o&1,\h7teAp2&ps*@?/M6T:N`;Uqmh?W&@j5r\$'`1aE?S'5uc;b</2JgXpJJ^eWEV<bp2E*q"lL<!<`Yg\0ZE&<U%mhU'KRg&,:%h7td>Q6ULX>CJpu>QJlua:44!]\A"m^nTo/6>g1o^hb,PY`(>D\co-G3r8:!&,L@D`Ic[l/aN5XF3L6%FhCFO3#msD/HLMKBGad8%r,m:XhE:[8a(IY.XG;g]E.hW0=ue-;LE&q,<ER#i<$I*u4k:+F'0I?*M?[VP5UToo%V%Z+&0s=W4kT4-#QWJr0;#[iWuU\da/EJH%c9sC\64IY3HtHHtbCLfM8V(Hod,Td'ju##GT.[O2#Ff5:86KgkrHq^lU@N:F!Lkm[?3S#C4f@Pj\_]hLHBD"?QVKU'N/K@FEG?,0%f)bT>3!=#%dlF=BaK?hlH1:l:M(5&iJtfXdY^]!YQMq)7Um:#5Qe$$J.HGlMl)Ro6p0kJYkp]!?XIg,hE&UdO()iA?=t,sOTeT[c%"M6N<$a`ZaaG\K6!t4(r\@aXFO]fE:kQm#:,i7WmLVtHYe1#158ReueYr+_;&sE=h6;g]*P<96,pISm.E$1GB%Zs?*Q<@`pX&M[5%].T(7(jM.b+Ym3KVKAh*Mhr-PAb*3]biH3dcK+RpR6lfT,"_K(T:ZXba^UTO?R(&:XcRAci!Fbj6)WMHBf?/sessgJb[g7#dAP26%@L#=b+Yrju<><3$as;]A-1[DFA?jqW.5P*ln?I0gR7YIo'7=%h?NKD<N\g"C1E+T^lms3Bh0:D!7W*CM9S/p:<)bK48SI_Zqa4n7%>IMW6[Y;dJLe>XuWC/)lJ#c)JaJ=8[6XJdW$?;]I_IO-^R6tErmXD+_8n&Df@b'Q18ZL7&o35V.kkL>f03LWaC["Inq$q]E&=<UN%K1?n4Kh4+DZ'r9=-Gb(l42)FV99:Wh_IS5U:fHbb,UU!3BhY*FM+k4Y>n$''J67JQ8;g0-F\"fS9EL:D0)(TZ,\F?1d1D_a&8?U'%0=jL/0gm?+V&.U#X>61m7K.Rj9TlVB:!oZUjQc,"A.nK/9t*P<+m;rI\O^6D@q$jS.uhXjg:N-_A.Gd+;OK)&f9[5Mi.J!?HUKZ'%:57EuWj_N2P*lG^SL&t-.[("dR5k_E8OWNd;rs11gm0NJ\SWKG=V*:a_uRnQ!pSinEl^oi/.jLRV93<T62[Q7q-fWKhLc*$9&Td]%^FNQbZ?*h!N1B2?&&ZgUW&?c^qZN`KGSnc)HPYg!!`ga")')1?46i=`3m>ZIU2<AT@CbZ+CmkANhX^mk`W=%qSAh?C-rdp(YpgT'%b?@@#%=,#U%`9Cn?@]rKO4,U=N$)<P[2U+J\_G`k!&4q._o)DaRL!_WR'p>a_M;ieArZ?>(Q3:VD$t`Y@=>g!Hl26X.5ns2@H&/k%%iurZN7K<"5JUY`A0o')(Rq-JV8BgH!k-)5P/p>%iFY(`;j\S$^i@km@Kn7`kJWU.X>;TMFfh3k.BR&hkG>CjFjBQKQ_Mr,cb'rC%QVQ@X?><[SL=`jo0?*%7Qque>\;p=U;JZ]0Nff12'\@?T3@HOLpIcs=Q'Xf>Lm@D8'\_bc:.!WJHH'16052jnGB!tGBdn.\[,3+e%PQ@hMp/5^aR3JNi^+.47Od<ii?kdUVV#m9HU_Mdd*iC7R\8$tuHb:W#?u,)H6k["kq]&+$lJnVF!cQLjqiO<l5MY;?,&k7k>Mt9U%[;5G/,-\=mgGoBhUtpTX^ZY1@N]W$3on$sdj:HS"Gn2c3\l2^B8j4f9n!:9P^?G8F/!30FJn9L6V\!7",^cC!@$)j_U_#@Cl^:%H%D`&>7o6"K@eSB_r>d#HBD.O8dPIo`]!Y$^REs@2DIbcZrTmQ1]`M'Yu]JDmCq,c8fToXW4FSi<Y#p#Krj5fH9*7WBi2LXDYL_7?B%GD>MP#>aA_Lc>]'Me:#sqOQdj3[6@Y>@&-IALSY!>!Dfs#p`k-&;8dtKDYsJ^>)Xb]N_WH]/+M!LTV6E[+`QG(!7'I,W@k8MV=-K%]<ePMem$sMCsdQM3Zhj]*c?U08iPoT><XT!?kDi7J81TIcIs($:BZVane#HdeLsm9pG$:P4:fWC.RKJ]&fT+.^lo*gZ(X8cJ$';B%FnWiN;HH,P/@WQUo.\?LC-0:PKDRK1[mO/t-5Icnb#Vui5Cd'r[U^4+cG/hJ6#95Rr7NO`e.UYE\(s5k0XF@:.cC"O9o]I0?^r]n%(;GTm8tJ2Vh?bp?MB;E@/Aj.X1;5<OJ7X3pqQ'I[.^]kg!8D]LM'.\ie7rod7J'Ck@@o*od<"%XrJN%#!b@8kr*DXO0iG<V2g[OC%bp=SL6gjhc[gK%A&:3AgnP59_L]ET:4Q2mZ'#M)<^'X_L0H8H$9;#GBo(eO8;dK?#\>cEINc6pD5RnQMghn4$]e)`QD;4G?j*D>2%?HuoqVd$'2]i14$:V8J%%Pd\VY-;T`l/UAqX+C29eV;+?1%GddjjFLE#_mZeD)oU$f[f5h#H]?L^<9Ps58MAV/BqDY,$>FT@GlO(%8gO-:\aHRfJiG-<G*`gJi]e.f=G_^=+RN,P5mTnrWMN"'(M=_S((#kP\18P&,WP<CVc/M,j[182pMa=H/WsrY/J9>WGU1/S,.SrB%5I<tCJdVX<9'`Is23rGgW4"PSkoHK!FB6]8,%9"o3SZtYV0.^*=pIKRk2@AII"fRWW/L^KOaF[I8-l`4;i;nkH0Na$a\.V)CQY:R%`#b]'2@-HkA,D$d74t4P'3ZZ_8@,CSZq(bD7rbiQ8:W$a.-pXjPfJLUMSr&9lYrXN0p3O!904WbI<V](</Tk>=<o_bYU$6M3Ach<%W5`W[,^aR9=L9Ot;$03uq5R'2MeKJ5(KlSM?`ptfn8(W<+\EP>C.f\C2Iu6KPg`-6R%]$u<VZ3dJ-7-UkhdP7"<1K&9*-PtB'9jn%@YrTZ'g[GRVA5EfDjB.3#1@2lTp0+m)FuEelDFh![Ke5bD%3<-o2:kW&mAAACTJs,(7qqIXJXXO,u0Wg.NJk`TERah$3:eGeu*m$%R&Jg]NJ8J`c[;3DhV_:+dD822L==HY^[u4-#kaN*9b*o<TgqJjU7Z`gfn4`(c!U[ZZL?/8_=I"Z`>@>kBk#95?tN>>r/d\q=Zk=g%8!C7cFA%X+2uM7%_$Zih3qR*+*5]/VBE7OZ::g+3^l_Hd?p,DDPk@D)-6Fsu8P:/;F-2cOMlN52^n6'N#R='sPb4MdhaXk)-Z?iK%1e`*PD]Ne)]-UFN4Se6h=IN]n-E-0nr\C#X_W!](X,;Knr'!\,&C%@Y;g4*&[`;&5KZ8`LM^nXDDubXC2HTtUbGT2EIpkqG]%c.5%VKEsXET[jKPan,+a.r/eKOgM;nmZ?7j*Nk)<X+1&>;pHrD\XjtfhFu2OE=?`ZH3%PE_mq'*=q0HJ#eh#%_7463NW@'@n/oN=9u)$%e4>+74#&$:@&M]p9%AY?Y_(k=7@#*>(2Fo>j$PMnLgPZR<fugaC6=`j@nX`(hR:_nJB]>(nk2`M/(mfgHOfpp'$lB4l"0WF<kWe^%Qq;`IcEV-pJZ+rn4T_O^Z8@ulP`StVQG?;H:e$)$p-Xn2hU;Ym"pKl^-,Q)1>[9+c&K1#pkZST#GY6;'9ctZ3X[QE3:020Sj6%(h%WI7<,75f]!MOn&c!.tlbjpBGsp0jZqSb'dN1\WeU4\UcdLI\>Vrs,FV=-<uTQo`dBg]Djr%B3Jkk%GANOB@TeUhX&,T#e(M&OqEM%/F-ci$&n>;ef0"a(ounGVe'#gZ9-O4[ib5q:DTI6aXN=>g[dLDlZ`HY%:KioJgHT+iptl6;@`!^S1TM^.td@-E<!RMk)Z6:!UXB3%A:SZmo0-QnFU8FEnedOVHWFFps5[!c@5Xosp'JoQl\>emK>cEh-;$l*%&pN`5PoVU$PI)WricophDK&H]\SH611]^K0'SUFL;f+'%gZMU)aIYE=i*a>E:o.qrd;;l&'BP&>G8VR$7QT+7ftV*^F$=uh4p@i_-3dgl%5qF0*tEDOQ`[<-_SSG/AiB8rBOIu\q[f<.P_C/7%?=qSkoVr7`aC"Gl0q:BP/+giq?eUX:259Pl$,RB9IZ24-j30!cV&:%Ib!c";9q@"-O6.[tFrCARD`:mE>nj2jp.04_'_l4*:P/Hr%WtQV76YTQg<Y"/X_!KinaX[n6D7:!.K1.YpI8T`N3+tlVp<2o17WP1HW5FuT"er6FgJ`sq+l&Dh"US3O%lf>R+N_W2jtQ0dJe-a\%g_Xj\'6MDC+p,2T_=^1='h:'$Gp!3X"$!;H6C\e/?:UKc/j]-/VcU$*g,l)dC<4r[8gj$d-]je=@bXd^G3$":'5**T:P,4Zq*$%n%#%(3uI9>$T&MBu.F]cgl/14'\c<j9?_`5d"]Z;Y(AjhKX8BTQ8LI#.&Wdn/;dQ^[X2#46ch!Nsqj;mt/Srg"W&&g/>)E-k;+0*3Z%TeJ$Sb_R@Q,7P9D!0dYUSHeX/U&-hGR:ANWBJ6PLQD`]1,0tCs:[r9K7:B6^34>,RZ=F/l)te&Q3bR["[&h0l%SIOYWV^LIN+?Y4%1l>3%?*CjJ6D_Hm_l#_HR\0WFY<W'A^OH%UpRcp2]76p^rqeqZa4Hs`n!Dp\pUa3crUeE#s8'pRr:]`3^&@NVVdKK%oDeaZq<(!A%nP=Z1q(KM\p[^&1J,Sc$5QBh@^]!a!ci<g=s+TRF,qf5^Vr.O'5CE<WOW0F$~>%AI9_PrivateDataEnd